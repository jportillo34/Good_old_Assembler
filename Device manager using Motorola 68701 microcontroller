*[]------------------------------------------------------------------[]
*
*   TODOS LOS PROCEDIMIENTOS DE TEMPORIZACION Y RETARDO QUE APARECEN
*      EN ESTE PROGRAMA FUERON PREPARADOS PARA UTILIZARSE CON EL
*           MICROCONTROLADOR 68701 DE MOTOROLA ( Osc 5 Mhz )
*
*
*       AQUI EL DISE¥O DETALLADO DE CADA PROCEDIMIENTO O MODULO
*           DEL PROGRAMA SE MEZCLA CON EL CODIGO ASSEMBLER
*                    PARA UNA MEJOR DESCRIPCION
*                        ( Pseudo Pascal )
*   ÜÜ         ÜÜ
*  Û  ßÜ     Üß  Û      Ü           Ü     ÜÜÜÜÜÜÜ             ÜÜÜÜÜ
*  Û    ßÜ Üß    Û    Üß ßÜ       Üß ßÜ      Û      ÜÜÜÜÜÜÜ   Û    ßÜ
*  Û      ß      Û   Û     Û     ßÜ    ß     Û      Û         Û    Üß
*  Û             Û   ÛÜÜÜÜÜÛ       ßÜ        Û      ÛÜÜÜ      Û  Üß
*  Û             Û   Û     Û   ßÜ   Üß       Û      Û         ÛßßÜÜ
*  Û             Û   Û     Û     ßÜß         Û      ÛÜÜÜÜÜÜ   Û    ßÜ
*
*                           VERSION 2.0
*
*                     DISE¥O E IMPLEMENTACION
*                        Jose  R. Portillo
*      Dpto. Investiguaci¢n y Desarrollo, XXXXXXXXXXXXXX c.a. 1994
*
*[]------------------------------------------------------------------[]
VNDC    EQU     $0000     * DIRECCION DEL NUMERO DE DISPOSITIVOS CONTROLADOS
SARRAY  EQU     $0001     * DIRECCION DE LA TABLA DE DISPOSITIVOS
RECR    EQU     $0014     * RAM/EPROM CONTROL REGISTER
BASEHR  EQU     $001A     * DIRECCION DE LA TABLA DE HORARIOS
TFR     EQU     $049B     * DIRECCION DE LA TABLA DE DIAS FERIADOS
RAMEM   EQU     $0080     * DIRECCION BASE DE MEMORIA RAM INTERNA AL 68701
LTCH_1  EQU     $2000     * PRIMER LATCH DE SALIDAS
LTCH_2  EQU     $4000     * SEGUNDO LATCH DE SALIDAS
LTCH_3  EQU     $6000     * TERCER LATCH DE SALIDAS
MASTER  EQU     $E000     * DIRECCION BASE DE LA MEMORIA DE PROGRAMA
VECTOR  EQU     $FFF8     * VECTOR PARA LA DIRECCION BASE DE LA ISRT
BOOT    EQU     $FFFE     * VECTOR PARA LA DIRECCION BASE DEL PROGRAMA
LCD     EQU         0     * DIRECCION DEL DISPLAY
RTC     EQU         1     * DIRECCION DEL REAL TIME CLOCK
TECLADO EQU         4     * DIRECCION DEL TECLADO
TECLAS  EQU       $07     * MASCARA PARA TECLAS DEL OPERADOR
T_PROG  EQU       $03     * TECLA "PROG" OPRIMIDA
T_MODIF EQU       $05     * TECLA "MODIF" OPRIMIDA
T_PROX  EQU       $06     * TECLA "PROX" OPRIMIDA
BUSTOP  EQU       $FF
NODISP  EQU       $07     * ESTADO NORMAL DEL BUS DE DISPOSITIVOS
DATBUS  EQU       $02     * DATA BUS PARA DISPOSITIVOS ( LCD, RTC, TECL. )
DIRBUS  EQU       $03     * ADDRESS BUS PARA DISPOSITIVOS
LAPSO   EQU        10     * 180     * LAPSO DE TIEMPO ANTES DEL ENCENDIDO DEL 1er. D.A.C.
LAPSO2  EQU        15     * LAPSO DE TIEMPO ANTES DEL ENCENDIDO DE SIGUIENTES D.A.C.



        ORG     RAMEM     * STAND BY RAM
*[]----------------------[]
*   HRFORN  RECORD
*      HORA:      BYTE
*      MINUTOS:   BYTE
*      MERIDIANO: BOOLEAN
*   END
*[]----------------------[]
HRFORN  RMB      3        * VARIABLE DE HORA EN FORMATO NORMAL

*[]--------------[]
*   TABLA  RECORD
*      DIA: BYTE
*      MES: BYTE
*   END
*[]--------------[]
TABLA   RMB      2        * VARIABLE INTERMEDIA DE DIAS FERIADOS


******** VARIABLES UTILIZADAS PARA LA VERIFICACION DEL HORARIO ********

INDHR   RMB      2        * INDICE DE HORARIOS DEL DIA
INDST   RMB      2        * INDICE DE INDICADORES DE STATUS DE HORARIO

*[]----------------------------[]
*   STATUS: ARRAY[1..4] OF BYTE
*[]----------------------------[]
STATUS  RMB      4        * INDICADORES PARA CADA HORARIO DEL DIA

*[]----------------------[]
*   HACTM  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
HACTM   RMB      2        * HORA ACTUAL EN FORMATO MILITAR

*[]----------------------[]
*   ENC1  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
ENC1    RMB      2        * HORA DE ENCENDIDO No.1 EN FORMATO MILITAR

*[]----------------------[]
*   APG1  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
APG1    RMB      2        * HORA DE APAGADO No.1 EN FORMATO MILITAR

*[]----------------------[]
*   ENC2  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
ENC2    RMB      2        * HORA DE ENCENDIDO No.2 EN FORMATO MILITAR

*[]----------------------[]
*   APG2  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
APG2    RMB      2        * HORA DE APAGADO No.2 EN FORMATO MILITAR

*[]----------------------[]
*   ENC3  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
ENC3    RMB      2        * HORA DE ENCENDIDO No.3 EN FORMATO MILITAR

*[]----------------------[]
*   APG3  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
APG3    RMB      2        * HORA DE APAGADO No.3 EN FORMATO MILITAR

*[]----------------------[]
*   ENC4  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
ENC4    RMB      2        * HORA DE ENCENDIDO No.4 EN FORMATO MILITAR

*[]----------------------[]
*   APG4  RECORD
*      HORA_MILITAR: BYTE
*      FRACCION:     BYTE
*   END
*[]----------------------[]
APG4    RMB      2        * HORA DE APAGADO No.4 EN FORMATO MILITAR


DSCTR   RMB      1        * NUMERO DE DISPOSITIVOS CONTROLADOS
OFFSET  RMB      1        * PARA DIRECCIONAR LA TABLA DE HORARIOS
INLCD   RMB      1        * INICIALIZACION DEL LCD
VRINT   RMB      1        * VARIABLE MANEJADA POR LA RUTINA DE INTERRUPCION
INDMD   RMB      1        * VARIABLE UTILIZADA POR EL PROCEDIMIENTO "INFECHA"
DVSOR   RMB      1        * VARIABLE DIVISOR PARA EL PROC. "DIV"
COCNT   RMB      1        * VARIABLE COCIENTE PARA EL PROC. "DIV"
DIRFILE RMB      2        * VARIABLE PARA EL PROC. "WRITE_HR" Y "READ_HR"
DIRAM   RMB      2        * VARIABLE PARA EL PROC. "WRITE_HR" Y "READ_HR"
DSPCONT RMB      1        * CONTADOR DE COMPROBACIONES PARA "AUTOMA"
SEGCONT RMB      1        * CONTADOR DE SEGUNDOS ( PROCEDIMIENTO INTERRUPT )
SALIDAS RMB      3
BITCONT RMB      1        * INDICE DE BITS PARA PROC. "CAMB_EST"
FRACMIN RMB      1        * INDICADOR DE LOS MINUTOS PROC "CAMB_EST"
FRACONT RMB      1        * CONTADOR DE MINUTOS ( SERVICIO DE INTERRUPCION )
ALTC    RMB      1        * INDICADOR DE ARRANQUE ESPECIAL
RECONF  RMB      1        * INDICADOR DE RECONFIGURACION DEL SISTEMA



        ORG     MASTER
*[]---------------------------------------------------------[]
*
*  PROCEDIMIENTO DE SERVICIO DE INTERRUPCION "IRQ", ACTIVADO
*  POR LA SE#AL "BUSY" DEL RTC ( CADA SEGUNDO ). VERIFICA
*  CADA SEGUNDO EL TICK DE MINUTO EN EL RTC, REFRESCA LA
*  PANTALLA PRINCIPAL DEL SISTEMA E INVOCA AL
*  PROCEDIMIENTO DE CONTROL DE ENCENDIDO Y
*  APAGADO DE DISPOSITIVOS
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> PNTLL, AUTOMA, BUSY
*
*
*  DETALLE PROCEDIMENTAL:
*
*   IF fracmin <> 0 THEN
*   BEGIN { conteo de fracciones de minutos }
*      fracont := fracont + 1
*      IF fracont = fracmin THEN
*      BEGIN { termina el conteo de minutos }
*         fracont := 0
*         fracmin := 0
*      END
*   END
*   ELSE
*   BEGIN { conteo normal de segundos }
*      segcont := segcont + 1
*      IF segcont >= 60 THEN
*      BEGIN
*         pntll { muestra la pantalla principal }
*         automa { comprueba el encendido y apagado }
*         segcont := 0 { comienza un nuevo minuto }
*      END
*   END
*   busy { ciclo de espera para salir de la interrupcion }
*
*[]---------------------------------------------------------[]
        LDAA    FRACMIN   * CARGA EL INDICADOR DE CONTEO ESPECIAL
        BEQ     ELSE_1
        INC     FRACONT   * INCREMENTA EL CONTADOR DE FRACCION
        LDAA    FRACONT
        CMPA    FRACMIN
        BNE     ELSE_2
        CLR     FRACONT
        CLR     FRACMIN
        BRA     ELSE_2
ELSE_1  INC     SEGCONT   * INCREMENTA EL CONTADOR DE SEGUNDOS
        LDAA    SEGCONT   * CARGA EL CONTADOR DE SEGUNDOS
        CMPA    #60       * 60 SEGUNDOS ?
        BMI     ELSE_2
        JSR     PNTLL     * PANTALLA CONSTANTE DE HORA Y FECHA DEL SISTEMA
        JSR     AUTOMA    * CONTROLA EL ENCENDIDO O APAGADO DE LOS DC
        CLR     SEGCONT
ELSE_2  JSR     BUSY
ISRT    RTI               * DIRECCION BASE DEL MODULO PRINCIPAL DE PROGRAMA



        ORG     ISRT+1
*[]------------------------------------------------------------[]
*
*  SECCION DE ARRANQUE ( PARA EL AMBIENTE DE EJECUCION ):
*
*  INICIA LOS PUERTOS DE ENTRADA/SALIDA ( DATA BUS / DIR BUS ),
*  LA MEMORIA RAM INTERNA Y MUESTRA POR PRIMERA VEZ LA PANTALLA
*  PRINCIPAL DEL SISTEMA DE CONTROL
*
*  DETALLE PROCEDIMENTAL:
*
*   impide las interrupciones
*   stack pointer := $00FF { inicia el stack pointer }
*   { activa en cero las salidas del sistema }
*   lcth_1 := 0
*   lcth_2 := 0
*   ltch_3 := 0
*   inicializa las principales variables de anotacion
*   recr := $7F
*   segcont := 0
*   fracont := 0
*   fracmin := 0
*   inlcd := 0
*   reconf := 0
*   inicializa el address bus de dispositivos
*   dirbus := nodisp
*   inicia el puerto de direcciones de dispositivos
*   est_gnrl(0) { apaga todos los dispositivos controlados }
*   pntll() { muestra la primera pantalla de hora y fecha }
*   automa() { conprueba el encendido y apagado de disp. }
*   IF reconf = 1 THEN
*   BEGIN
*      muestra la advertencia de reconfigurar
*      WHILE tecl_in <> t_prog DO
*      BEGIN
*      END
*      programacion() { pasa a la seccion de configuracion }
*   END
*   pntll()
*
*[]------------------------------------------------------------[]
        SEI               * IMPIDE LAS INTERRUPCIONES
        CLRA
        STAA    LTCH_1
        STAA    LTCH_2
        STAA    LTCH_3
        LDS     #$00FF    * INICIA EL STACK POINTER
        LDAA    #$7F      * HABILITA EL ACCESO A LA MEMORIA RAM
        STAA    RECR
        CLR     SEGCONT   * INICIALIZA EL CONTADOR DE SEGUNDOS
        CLR     FRACONT   * INICIALIZA EL CONTADOR DE MINUTOS
        CLR     FRACMIN   * INICIALIZA EL INDICADOR DE CONTEO
        CLR     INLCD     * PERMITE LA PROGRAMACION DEL LCD
        CLR     RECONF    * INICIALIZA EL INDICADOR DE RECONFIGURACION
        LDAA    #NODISP   * NINGUN DISPOSITIVO SELECCIONADO
        STAA    DIRBUS
        LDAA    #BUSTOP   * INICIA EL PUERTO DEL ADDRESS BUS
        STAA    $01
        CLRA
        JSR     EST_GNRL  * APAGA TODOS LOS DISPOSITIVOS CONTROLADOS
        JSR     PNTLL     * PANTALLA CONSTANTE DE HORA Y FECHA DEL SISTEMA
        JSR     AUTOMA    * CONTROLA EL ENCENDIDO O APAGADO DE LOS DC
        LDAA    RECONF    * CARGA EL INDICADOR DE RECONFIGURACION
        CMPA    #1        * SE DEBE RECONFIGURAR EL SISTEMA ?
        BNE     NORCFG
*[]--------------------------------------------------------------[]
*
*  AVISO AL OPERADOR Y POSTERIOR ENTRADA AL CICLO DE PROGRAMACION
*
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        º* RECONFIGURAR *º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------------[]
        LDAA    #$01      * CLEAR DISPLAY
        JSR     INST4B
        LDAA    #'*'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'C'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'F'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'G'
        JSR     ESCLCD
        LDAA    #'U'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'*'
        JSR     ESCLCD
NCFG_2  JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA PARA MODO DE PROGRAMACION ?
        BNE     NCFG_2
        JSR  PROGRAMACION * PROGRAMACION Y CONFIGURACION DEL SISTEMA
NORCFG  JSR     PNTLL     * PANTALLA CONSTANTE DE HORA Y FECHA DEL SISTEMA



*[]------------------------------------------------------[]
*
*  CONSOLA DEL OPERADOR:
*
*    ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*    º10:30am 04/11/94º  <-- PANTALLA LCD
*    ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*    ÚÄÄÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÄÄ¿
*    ³   ÄÄÄ   ³ ³   ÄÅÄ   ³ ³         ³
*    ³  ÚÄÄÄ¿  ³ ³  ÚÄÄÄ¿  ³ ³  ÚÄÄÄ¿  ³  <-- TECLADO
*    ³  ÀÄÄÄÙ  ³ ³  ÀÄÄÄÙ  ³ ³  ÀÄÄÄÙ  ³
*    ³  PROGR  ³ ³  MODIF  ³ ³  PROXM  ³
*    ÀÄÄÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÄÙ
*
*
*  DETALLE PROCEDIMENTAL:
*
*   FOR siempre
*   BEGIN
*      REPEAT
*         cli { permite las interrupciones }
*         sei { impide las interrupciones }
*      UNTIL tecl_in = t_prox OR tecl_in = t_prog
*      IF tecl_in = t_prox THEN camdat
*      ELSE programacion
*      pntll
*      automa
*   END
*
*[]------------------------------------------------------[]
CONSOLA CLI               * PERMITE LAS INTERRUPCIONES
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        SEI               * IMPIDE LAS INTERRUPCIONES
        CMPB    #T_PROG   * TECLA PARA MODO DE PROGRAMACION ?
        BEQ     PR_GRM
        CMPB    #T_PROX   * TECLA PARA MODO DE HORA Y FECHA ?
        BNE     CONSOLA
        JSR     CAMDAT    * CAMBIO DE HORA Y FECHA DEL SISTEMA
        BRA     ACT_1
PR_GRM  JSR  PROGRAMACION * PROGRAMACION Y CONFIGURACION DEL SISTEMA
ACT_1   JSR     PNTLL     * PANTALLA CONSTANTE DE HORA Y FECHA DEL SISTEMA
        JSR     AUTOMA    * CONTROLA EL ENCENDIDO O APAGADO DE LOS DC
        BRA     CONSOLA



        FCC     '  Dpto. Investiguaci¢n y Desarrollo, TECNOSIGLO c.a. 1994  '



*[]-----------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE MUESTRA EN LA PANTALLA LA HORA Y LA FECHA
*  DEL SISTEMA AL MOMENTO DE SU LLAMADA
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> LEEBID, BUSY, INSTLCD, INST4B,
*                              ESCLCD
*
*
*  DETALLE PROCEDIMENTAL:
*
*   leebid($00,$00,$00,$00,$00,$00,$00)
*   inicia los bits del puerto de datos en cero
*   configura los bits como salida
*   busy
*   IF inlcd <> 1 THEN
*   BEGIN
*      instlcd($03) { function set 8 bits }
*      instlcd($02) { function set 4 bits }
*      inst4b($28) { set 4 bits, 1 linea y 5x7 dots }
*      inlcd := 1
*   END
*   inst4b($01) { clear display }
*   inst4b($0E) { set cursor }
*   {                               }
*   { muestra la hora en el sistema }
*   {                               }
*   IF bid.hora[decena] = 0 THEN esclcd(' ')
*   ELSE esclcd( bid.hora.decena )
*   esclcd( bid.hora.unidad )
*   {                                   }
*   { muestra los minutos en el sistema }
*   {                                   }
*   esclcd(':') { separacion entre hh : mm }
*   esclcd( bid.minutos.decena )
*   esclcd( bid.minutos.unidad )
*   {                       }
*   { muestra el dato am/pm }
*   {                       }
*   IF bid.meridiano = 1 THEN esclcd('p')
*   ELSE esclcd('a')
*   esclcd('m')
*   esclcd(' ')
*   inst4b($C0) { cambia el cursor a la siguiente linea }
*   {                        }
*   { muestra el dia del mes }
*   {                        }
*   esclcd( bid.dia_del_mes.decena )
*   esclcd( bid.dia_del_mes.unidad )
*   {                }
*   { muestra el mes }
*   {                }
*   esclcd('/') { separacion entre dd / mm }
*   esclcd( bid.mes.decena )
*   esclcd( bid.mes.unidad )
*   {                }
*   { muestra el a#o }
*   {                }
*   esclcd('/') { separacion entre mm / aa }
*   esclcd( bid.a#o.decena )
*   esclcd( bid.a#o.unidad )
*
*[]-----------------------------------------------------------[]
PNTLL

*[]------------------------------------[]
*   LEEBID($00,$00,$00,$00,$00,$00,$00)
*[]------------------------------------[]
        CLRA
        PSHA              * RESERVA ESPACIO PARA EL BLOQUE DE INTERCAMBIO
        PSHA              * DE DATOS CON EL RTC (BID)
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     LEEBID    * LEE EL BID
        PSHX
*[]------------------------------------------------------------[]
*  A CONTINUACION SE MUESTRAN EN EL LCD LOS VALORES ALMACENADOS
*  EN EL BID
*[]------------------------------------------------------------[]
        CLRA              * INICIA LOS BITS ANTES DE CONFIGURAR
        STAA    DATBUS
        LDAA    #BUSTOP   * INICIA DATA BUS CON BITS DE SALIDA
        STAA    $00
        JSR     BUSY
        LDAA    INLCD
        CMPA    #1        * SE HA PROGRAMADO ANTES EL LCD ?
        BEQ     NOPRG     * NO ES NECESARIO PROGRAMAR DE NUEVO
*[]-----------------------------[]
*  CICLO DE PROGRAMACION DEL LCD
*[]-----------------------------[]
        LDAA    #$03      * FUNCTION SET 8 BITS
        JSR     INSTLCD
        LDAA    #$02      * FUNCTION SET 4 BITS
        JSR     INSTLCD
        LDAA    #$28      * SET 4 BIT, 1 LINEA Y 5x7 DOTS
        JSR     INST4B
        LDAA    #1        * INICIALIZACION DEL LCD NO PERMITIDA ( 1 )
        STAA    INLCD
NOPRG   LDAA    #$01      * CLEAR DISPLAY
        JSR     INST4B
        LDAA    #$0E      * SET CURSOR
        JSR     INST4B
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        º10:04am 04/11/94º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        TSX
        LDAB    $4,X      * CARGA LA HORA DEL DIA
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE HORA
        RORA
        RORA
        RORA
        ANDA    #$0F
        BNE     DECE1
        LDAA    #' '
        BRA     MSTR1
DECE1   ORA     #$30      * ASCII DEL VALOR
MSTR1   JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE HORA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #':'      * SEPARACION
        JSR     ESCLCD
        TSX
        LDAB    $2,X      * CARGA LOS MINUTOS
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE MINUTO
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE MINUTO
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TSX
        LDAA    $3,X      * CARGA EL DATO AM/PM
        CMPA    #$01
        BEQ     POSTM
        LDAA    #'a'
        JMP     MERID
POSTM   LDAA    #'p'
MERID   JSR     ESCLCD
        LDAA    #'m'
        JSR     ESCLCD
        LDAA    #' '      * SEPARACION
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA LA SEGUNDA LINEA
        JSR     INST4B
        TSX
        LDAB    $7,X      * CARGA EL DIA DEL MES
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE DIA
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE DIA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #'/'      * SEPARACION
        JSR     ESCLCD
        TSX
        LDAB    $6,X      * CARGA EL MES
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE MES
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE MES
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #'/'      * SEPARACION
        JSR     ESCLCD
        TSX
        LDAB    $5,X      * CARGA EL A#O
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE A#O
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE A#O
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULX
        PULA              * LIBERA ESPACIO RESERVADO A EL BID
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        RTS



*[]---------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE CAMBIAR LOS DATOS DE HORA
*  Y FECHA EN EL RTC UTILIZANDO EL TECLADO ESPECIAL Y
*  EL LCD PARA MOSTRAR LOS CAMBIOS
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> LEEBID, INST4B, ESCLCD,
*                              TECL_IN, ESCBID
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]---------------------------------------------------[]
CAMDAT

*[]------------------------------------[]
*   leebid($00,$00,$00,$00,$00,$00,$00)
*[]------------------------------------[]
        CLRA
        PSHA              * RESERVA ESPACIO PARA EL BLOQUE DE INTERCAMBIO
        PSHA              * DE DATOS CON EL RTC (BID)
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     LEEBID    * LEE EL BID
        PSHX
        CLRA              * ACTIVA DATA BUS CON BITS DE SALIDA
        STAA    DATBUS
        LDAA    #BUSTOP
        STAA    $00
        LDAA    #$02      * ACTIVA LA PRIMERA LINEA DEL LCD
        JSR     INST4B
        LDAA    #$14      * COLOCA EL CURSOR EN EL CAMPO DE LA HORA
        JSR     INST4B
        TSX
        JMP     HORA5     * SIGUIENTE CAMPO


*[]---------------------------------------------------------------[]
*
*                SECCION PARA EL CAMBIO DE LA HORA
*
*
*   WHILE tecl_in = t_modif OR tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = prog THEN
*      BEGIN
*         { decrementa la hora del sistema, teniendo cuidado de }
*         { pasar de 12 am/pm a 11 am/pm                        }
*         IF bid.hora.unidad = 2 AND bid.hora.decena = 1 THEN
*            bid.meridiano := bid.meridiano XOR 1 { negacion }
*         IF bid.hora.unidad = 1 AND bid.hora.decena = 0 THEN
*         BEGIN
*            bid.hora.unidad := 2
*            bid.hora.decena := 1
*         END
*         ELSE
*            IF bid.hora.unidad = 0 AND bid.hora.decena = 1 THEN
*            BEGIN
*               bid.hora.unidad := 9
*               bid.hora.decena := 0
*            END
*            ELSE bid.hora.unidad := bid.hora.unidad - 1
*      END
*      ELSE
*         { incrementa la hora del sistema, teniendo cuidado de }
*         { pasar de 12 am/pm a 1 am/pm                         }
*         IF bid.hora.unidad = 2 AND bid.hora.decena = 1 THEN
*         BEGIN
*            bid.hora.unidad := 1 { pasa de 12 a 1 }
*            bid.hora.decena := 0
*         END
*         ELSE
*         BEGIN
*            bid.hora.unidad := bid.hora.unidad + 1
*            IF bid.hora.unidad <> 2 THEN
*            BEGIN
*               IF bid.hora.unidad = $0A THEN { incremento en BCD }
*               BEGIN
*                  bid.hora.unidad := 0
*                  bid.hora.decena := bid.hora.decena + 1
*               END
*            END
*            ELSE
*               IF bid.hora.decena = 1 THEN
*                  bid.meridiano := bid.meridiano XOR 1 { negacion }
*         END
*      .
*      .
*      { muestra el nuevo valor de la hora }
*      .
*      .
*   END
*
*[]---------------------------------------------------------------[]
DECRHR  LDAA    $4,X      * CARGA EL VALOR DE LA HORA
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #2        * BID.HORA.UNIDAD
        BNE     DCHR_1
        CMPA    #$10      * BID.HORA.DECENA
        BNE     DCHR_1
        PSHA
        LDAA    $4,X      * BID.MERIDIANO
        EORA    #$01      * NEGACION DEL VALOR AM/PM
        ANDA    #1
        STAA    $4,X      * BID.MERIDIANO
        PULA
DCHR_1  CMPB    #1        * BID.HORA.UNIDAD
        BNE     DCHR_2
        CMPA    #0        * BID.HORA.DECENA
        BNE     DCHR_2
        LDAB    #2        * BID.HORA.UNIDAD
        LDAA    #$10      * BID.HORA.DECENA
        BRA     HORA3
DCHR_2  CMPB    #0        * BID.HORA.UNIDAD
        BNE     DCHR_3
        CMPA    #$10      * BID.HORA.DECENA
        BNE     DCHR_3
        LDAB    #9        * BID.HORA.UNIDAD
        LDAA    #0        * BID.HORA.DECENA
        BRA     HORA3
DCHR_3  DECB              * BID.HORA.UNIDAD
        BRA     HORA3
INCRHR  LDAA    $4,X      * CARGA EL VALOR DE LA HORA
        TAB
        ANDB    #$F0
        ANDA    #$0F
        CMPA    #$02      * SON LAS 12 O LAS 2 ?
        BNE     HORA1
        CMPB    #$10
        BNE     HORA1
        LDAA    #$01      * PASA DE 12 A 1
        BRA     HORA4     * ALMACENA EL NUEVO VALOR
HORA1   INCA              * INCREMENTA EL DIGITO MENOS SIGNIFICATIVO
        CMPA    #$02      * SON LAS 12 O LAS 2 ?
        BNE     HORA2
        CMPB    #$10
        BNE     HORA3     * EL VALOR ES 2
        ABA
        STAA    $4,X
        LDAA    $3,X      * CARGA EL DATO AM/PM
        EORA    #$01      * NEGACION DEL VALOR AM/PM
        STAA    $3,X      * ALMACENA EL NUEVO VALOR
        BRA     HORA8
HORA2   CMPA    #$0A      * INCREMENTO EN BCD
        BNE     HORA3
        LDAA    #$10
        BRA     HORA4
HORA3   ABA               * FORMA EL VALOR BCD DE LA HORA
HORA4   STAA    $4,X      * ALMACENA EL VALOR DE LA HORA NUEVA
*[]-------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LA HORA EN EL LCD
*[]-------------------------------------------[]
HORA8   LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS
        LDAB    $4,X      * CARGA LA HORA DEL DIA
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE HORA
        RORA
        RORA
        RORA
        ANDA    #$0F
        BNE     HORA6
        LDAA    #' '
        BRA     MSHOR
HORA6   ORA     #$30      * ASCII DEL VALOR
MSHOR   PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE HORA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
*[]-------------------------------------[]
*  MUESTRA EL NUEVO VALOR DEL DATO AM/PM
*[]-------------------------------------[]
        LDAA    #$03
MERD    PSHA
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE HORA
        PULA
        DECA
        BNE     MERD
        LDAA    $3,X      * CARGA EL DATO AM/PM
        ANDA    #$01
        CMPA    #$01
        BEQ     PSM
        LDAA    #'a'
        JMP     MRD
PSM     LDAA    #'p'
MRD     JSR     ESCLCD
        LDAA    #'m'
        JSR     ESCLCD
        LDAA    #$06
MERD2   PSHA
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE HORA
        PULA
        DECA
        BNE     MERD2
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
HORA5   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_1
        JMP     DECRHR    * DECREMENTAR EL CAMPO DE LA HORA
MDF_1   CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     SMIN5
        JMP     INCRHR    * INCREMENTAR EL CAMPO DE LA HORA
SMIN5   LDAA    #$03      * MUEVE EL CURSOR A LA POSICION DE
CAMP2   PSHA              * LAS UNIDADES DE MINUTO
        LDAA    #$14
        JSR     INST4B
        PULA
        DECA
        BNE     CAMP2
        JMP     MIN5


*[]--------------------------------------------------------------[]
*
*             SECCION PARA EL CAMBIO DE LOS MINUTOS
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF bid.minuto.unidad = 0 AND bid.minuto.decena = 0 THEN
*         BEGIN
*            bid.minuto.unidad := 9
*            bid.minuto.decena := 5
*         END
*         ELSE
*            IF bid.minuto.unidad = 0 THEN
*            BEGIN
*               bid.minutos.unidad := 9
*               bid.minutos.decena := bid.minutos.decena - 1
*            END
*            ELSE bid.minutos.unidad := bid.minutos.unidad - 1
*      END
*      ELSE
*         IF bid.minuto.unidad = 9 THEN
*         BEGIN
*            bid.minuto.unidad := 0 { 59 minutos ? }
*            IF bid.minuto.decena = 5 THEN bid.minuto.decena := 0
*            ELSE bid.minuto.decena := bid.minuto.decena + 1
*         END
*         ELSE bid.minuto.unidad := bid.minuto.unidad + 1
*      .
*      .
*      { muestra el nuevo valor de los minutos }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRMN  LDAA    $2,X      * CARGA EL VALOR DE LOS MINUTOS
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #0        * BID.MINUTOS.UNIDAD
        BNE     DCMN_1
        CMPA    #0        * BID.MINUTOS.DECENA
        BNE     DCMN_1
        LDAB    #9        * BID.MINUTOS.UNIDAD
        LDAA    #$50      * BID.MINUTOS.DECENA
        BRA     MIN3
DCMN_1  CMPB    #0        * BID.MINUTOS.UNIDAD
        BNE     DCMN_2
        LDAB    #9        * BID.MINUTOS.UNIDAD
        SUBA    #$10      * BID.MINUTOS.DECENA
        BRA     MIN3
DCMN_2  DECB              * BID.MINUTOS.UNIDAD
        BRA     MIN3
INCRMN  LDAA    $2,X      * CARGA EL VALOR DE LOS MINUTOS
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     MIN1
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        CMPA    #$50      * ES EL VALOR LEIDO 59 MINUTOS ?
        BEQ     MIN2
        ADDA    #$10
        BRA     MIN3
MIN2    CLRA              * PASA DE 59 A 00 MINUTOS
        BRA     MIN4
MIN1    INCB
MIN3    ABA
MIN4    STAA    $2,X      * ALMACENA EL NUEVO VALOR DE LOS MINUTOS
*[]-----------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LOS MINUTOS EN EL LCD
*[]-----------------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE MINUTO
        LDAB    $2,X      * CARGA LOS MINUTOS
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE MINUTO
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE MINUTO
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE MINUTO
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
MIN5    JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_2
        JMP     DECRMN    * DECREMENTAR EL CAMPO DE LOS MINUTOS
MDF_2   CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     CBD
        JMP     INCRMN    * INCREMENTAR EL CAMPO DE LOS MINUTOS
CBD     LDAA    #$C0      * CAMBIA LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL DIA
        JMP     DIA5


*[]--------------------------------------------------------------[]
*
*               SECCION PARA EL CAMBIO DEL DIA
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF bid.dia.unidad = 1 AND bid.dia.decena = 0 THEN
*         BEGIN
*            bid.dia.unidad := 1
*            bid.dia.decena := 3
*         END
*         ELSE
*            IF bid.dia.unidad = 0 THEN
*            BEGIN
*               bid.dia.unidad := 9
*               bid.dia.decena := bid.dia.decena - 1
*            END
*            ELSE bid.dia.unidad := bid.dia.unidad - 1
*      END
*      ELSE
*         IF bid.dia.unidad = 9 THEN
*         BEGIN
*            bid.dia.decena := bid.dia.decena + 1
*            bid.dia.unidad := 0
*         END
*         ELSE
*            IF bid.dia.unidad = 1 AND bid.dia.decena = 3 THEN
*            BEGIN
*               bid.dia.unidad := 1
*               bid.dia.decena := 0
*            END
*            ELSE bid.dia.unidad := bid.dia.unidad + 1
*      .
*      .
*      { muestra el nuevo valor del dia }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRDIA LDAA    $7,X      * CARGA EL VALOR DEL DIA
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #1        * BID.DIA.UNIDAD
        BNE     DCD_1
        CMPA    #0        * BID.DIA.DECENA
        BNE     DCD_1
        LDAB    #1        * BID.DIA.UNIDAD
        LDAA    #$30      * BID.DIA.DECENA
        BRA     DIA2
DCD_1   CMPB    #0        * BID.DIA.UNIDAD
        BNE     DCD_2
        LDAB    #9        * BID.DIA.UNIDAD
        SUBA    #$10      * BID.DIA.DECENA
        BRA     DIA2
DCD_2   DECB              * BID.DIA.UNIDAD
        BRA     DIA2
INCRDIA LDAA    $7,X      * CARGA EL VALOR DEL DIA
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     DIA1
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        ADDA    #$10
        BRA     DIA2
DIA1    CMPB    #$01
        BNE     DIA3
        CMPA    #$30
        BNE     DIA3
        LDAA    #$01
        BRA     DIA4
DIA3    INCB
DIA2    ABA
DIA4    STAA    $7,X      * ALMACENA EL NUEVO VALOR DE LOS DIAS
*[]--------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LOS DIAS EN EL LCD
*[]--------------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE DIA
        LDAB    $7,X      * CARGA LOS DIAS
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE DIA
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE DIA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE DIA
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
DIA5    JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_3
        JMP     DECRDIA   * DECREMENTA EL CAMPO DEL DIA
MDF_3   CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     CBM
        JMP     INCRDIA   * INCREMENTA EL CAMPO DEL DIA
CBM     LDAA    #$03
UNM     PSHA
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL MES
        PULA
        DECA
        BNE     UNM
        JMP     MES5


*[]--------------------------------------------------------------[]
*
*                SECCION PARA EL CAMBIO DEL MES
*
*
*   WHILE tecl_in = t_modif AND tecl_in = T_PROG DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF bid.mes.unidad = 1 AND bid.mes.decena = 0 THEN
*         BEGIN
*            bid.mes.unidad := 2
*            bid.mes.decena := 1
*         END
*         ELSE
*            IF bid.mes.unidad = 0 THEN
*            BEGIN
*               bid.mes.unidad := 9
*               bid.mes.decena := bid.mes.decena - 1
*            END
*            ELSE bid.mes.unidad := bid.mes.unidad - 1
*      END
*      ELSE
*         IF bid.mes.unidad = 9 THEN
*         BEGIN
*            bid.mes.decena := bid.mes.decena + 1
*            bid.mes.unidad := 0
*         END
*         ELSE
*            IF bid.mes.unidad = 2 AND bid.mes.decena = 1 THEN
*            BEGIN
*               bid.mes.unidad := 1
*               bid.mes.decena := 0
*            END
*            ELSE bid.mes.unidad := bid.mes.unidad + 1
*      .
*      .
*      { muestra el nuevo valor del mes }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRMES LDAA    $6,X      * CARGA EL VALOR DEL MES
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #1        * BID.MES.UNIDAD
        BNE     DCMS_1
        CMPA    #0        * BID.MES.DECENA
        BNE     DCMS_1
        LDAB    #2        * BID.MES.UNIDAD
        LDAA    #$10      * BID.MES.DECENA
        BRA     MES2
DCMS_1  CMPB    #0        * BID.MES.UNIDAD
        BNE     DCMS_2
        LDAB    #9        * BID.MES.UNIDAD
        SUBA    #$10      * BID.MES.DECENA
        BRA     MES2
DCMS_2  DECB              * BID.MES.UNIDAD
        BRA     MES2
INCRMES LDAA    $6,X      * CARGA EL VALOR DEL MES
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     MES1
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        ADDA    #$10
        BRA     MES2
MES1    CMPB    #$02
        BNE     MES3
        CMPA    #$10
        BNE     MES3
        LDAA    #$01
        BRA     MES4
MES3    INCB
MES2    ABA
MES4    STAA    $6,X      * ALMACENA EL NUEVO VALOR DEL MES
*[]----------------------------------------[]
*  MUESTRA EL NUEVO VALOR DEL MES EN EL LCD
*[]----------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DEL MES
        LDAB    $6,X      * CARGA EL MES
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DEL MES
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DEL MES
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL MES
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
MES5    JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_4
        JMP     DECRMES   * DECREMENTA EL CAMPO DEL MES
MDF_4   CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     CBA
        JMP     INCRMES   * DECREMENTA EL CAMPO DEL MES
CBA     LDAA    #$03
UNA     PSHA
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL A¥O
        PULA
        DECA
        BNE     UNA
        JMP     ANO5


*[]--------------------------------------------------------------[]
*
*                 SECCION PARA EL CAMBIO DEL A¥O
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF bid.a¤o.unidad = 0 AND bid.a¤o.decena = 0 THEN
*         BEGIN
*            bid.a¤o.unidad := 9
*            bid.a¤o.decena := 9
*         END
*         ELSE
*            IF bid.a¤o.unidad = 0 THEN
*            BEGIN
*               bid.a¤o.unidad := 9
*               bid.a¤o.decena := bid.a¤o.decena - 1
*            END
*            ELSE bid.a¤o.unidad := bid.a¤o.unidad - 1
*      END
*      ELSE
*         IF bid.a¤o.unidad = 9 THEN
*         BEGIN
*            bid.a¤o.unidad := 0
*            IF bid.a¤o.decena = 9 THEN bid.a¤o.decena := 0
*            ELSE bid.a¤o.decena := bid.a¤o.decena + 1
*         END
*         ELSE bid.a¤o.unidad := bid.a¤o.unidad + 1
*      .
*      .
*      { muestra el nuevo valor del a¤o }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRAN  LDAA    $5,X      * CARGA EL VALOR DEL A¥O
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #0        * BID.A¥O.UNIDAD
        BNE     DCAN_1
        CMPA    #0        * BID.A¥O.DECENA
        BNE     DCAN_1
        LDAB    #9        * BID.A¥O.UNIDAD
        LDAA    #$90      * BID.A¥O.DECENA
        BRA     ANO3
DCAN_1  CMPB    #0        * BID.A¥O.UNIDAD
        BNE     DCAN_2
        LDAB    #9        * BID.A¥O.UNIDAD
        SUBA    #$10      * BID.A¥O.DECENA
        BRA     ANO3
DCAN_2  DECB              * BID.A¥O.UNIDAD
        BRA     ANO3
INCRAN  LDAA    $5,X      * CARGA EL VALOR DEL A¥O
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     ANO1
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        CMPA    #$90
        BNE     ANO2
        CLRA
        BRA     ANO4
ANO2    ADDA    #$10
        BRA     ANO3
ANO1    INCB
ANO3    ABA
ANO4    STAA    $5,X      * ALMACENA EL NUEVO VALOR DEL A¥O
*[]----------------------------------------[]
*  MUESTRA EL NUEVO VALOR DEL A#O EN EL LCD
*[]----------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DEL A¥O
        LDAB    $5,X      * CARGA EL A¥O
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DEL A¥O
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DEL A¥O
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL A¥O
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
ANO5    JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_5
        JMP     DECRAN    * DECREMENTA EL CAMPO DE A¥O
MDF_5   CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     NOCR
        JMP     INCRAN    * DECREMENTA EL CAMPO DEL A¥O


*[]------------------------------------------------[]
*
*  REGRESA EL SISTEMA AL ESTADO NORMAL DE OPERACION
*
*[]------------------------------------------------[]
NOCR    LDAA    #$14      * COLOCA EL CURSOR FUERA DE LA PANTALLA
        JSR     INST4B
        PULX
        JSR     ESCBID    * ACTUALIZA EL CONTENIDO DEL BID EN EL RTC
        PULA              * LIBERA ESPACIO RESERVADO A EL BID
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA


*[]----------------------------------[]
*
*  EDITA LA TABLA DE DIA DE LA SEMANA
*
*[]----------------------------------[]
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #'L'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'M'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'M'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'J'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'V'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'D'
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºL M M J V S D   º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     EDTDIA    * EDITA EL DIA DE LA SEMANA ACTUAL
        RTS



*[]---------------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE MODIFICAR TODA LA CONFIGURACION DEL SISTEMA
*  DE CONTROL, INCLUYENDO LA PROGRAMACION DE HORARIOS Y ASIGNACION
*  DE DIAS FERIADOS, ASI COMO TAMBIEN LA INTRODUCCION
*  DEL NUMERO DE DISPOSITIVOS CONTROLADOS
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, ESCLCD, DISP_IN, EDTDIA, AUTOMA,
*                              TIPO_HR, ESTADO_DISP, TECL_IN, READ_TPH,
*                              READ_#DCTR, BINBCD, INCLUIR_HR, DEF_DISP,
*                              FERIAD
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]---------------------------------------------------------------------[]
PROGRAMACION
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * INICIA EL DATA BUS CON BITS DE SALIDA
        STAA    $00


*[]------------------------------------------------[]
*
*  SELECCION DEL NUMERO DE DISPOSITIVOS CONTROLADOS
*
*[]------------------------------------------------[]
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'P'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'T'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'V'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'>'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºDISPOSITIVOS> 24º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     DISP_IN   * EDITA Y ESCRIBE EL NUEVO VALOR DEL # DISP.
        INX
        INX


*[]------------------------------------------------[]
*
*  MUESTRA EL ESTADO DE CADA DISPOSITIVO CONTROLADO
*
*[]------------------------------------------------[]
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * INICIA EL DATA BUS CON BITS DE SALIDA
        STAA    $00
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºDISP 01>0       º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     ESTADO_DISP


*[]---------------------------------[]
*  EDITAR LOS HORARIOS PROGRAMADOS ?
*[]---------------------------------[]
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'T'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'H'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'.'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºEDITAR HOR.SI/NOº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
DESIC_3 LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAB    #3
CUR_N_S LDAA    #$14      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        DECB
        BNE     CUR_N_S
DESIC_1 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DESIC_1
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BEQ     EDIC_HR   * SI HAY EDICION DE HORARIOS
        LDAB    #3
CUR_N_N LDAA    #$14      * COLOCA EL CURSOR EN "N"
        JSR     INST4B
        DECB
        BNE     CUR_N_N
DESIC_2 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DESIC_2
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     DESIC_3
        JMP     EDIT_DEF  * PASA A LA DEFINICION DE DISPOSITIVOS


*[]-----------------------------------------------------------[]
*
*  SECCION PARA PROGRAMACION DE HORARIOS DE ENCENDIO Y APAGADO
*
*[]-----------------------------------------------------------[]
EDIC_HR
*[]---------------------------------------------------------------[]
*
*   dsctr := read_#dctr()
*   dirfile := basehr { apunta a la base de la tabla de horarios }
*   diram := ^enc1 { apunta a la variable en ram }
*   FOR contador de dispositivos := 1 TO dsctr DO
*   BEGIN
*      .
*      .
*      permite modificar todos los horarios del dispositivo
*      .
*      .
*
*[]---------------------------------------------------------------[]
        JSR     READ_#DCTR * LEE EL NUMERO DE DISP. CONTROLADOS
        STAA    DSCTR
        LDX     #BASEHR    * APUNTA A LA BASE DE LA TABLA DE HORARIOS
        STX     DIRFILE
        LDX     #ENC1
        STX     DIRAM
        LDAB    #1
PRXDSP  PSHB
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE ENCENDIDO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        PULB
        TBA
        PSHB
        JSR     BINBCD    * PREPARA EL NUMERO DEL DISPOSITIVO
        TAB
        ASRA              * DIGITO DE LAS DECENAS
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD
        TBA
        ANDA    #$0F      * DIGITO DE LAS UNIDADES
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD
        LDAA    #'>'
        JSR     ESCLCD
        LDAA    #'L'
        JSR     ESCLCD
        LDAA    #'V'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV E1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE APAGADO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH1  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH1
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV A1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE ENCENDIDO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH2  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH2
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV E2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE APAGADO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH3  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH3
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV A2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE ENCENDIDO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH4  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH4
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV E3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE APAGADO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH5  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH5
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV A3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE ENCENDIDO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH6  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH6
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV E4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  LUNES A VIERNES - HORARIO DE APAGADO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH7  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH7
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>LV A4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE ENCENDIDO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #3        * MODIFICA PARTE DEL ENCABEZADO
INCLH8  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH8
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'B'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB E1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE APAGADO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH9  LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH9
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB A1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE ENCENDIDO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH10 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH10
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB E2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE APAGADO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH11 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH11
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB A2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE ENCENDIDO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH12 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH12
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB E3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE APAGADO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH13 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH13
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB A3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE ENCENDIDO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH14 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH14
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB E4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  SABADO - HORARIO DE APAGADO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH15 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH15
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>SB A4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE ENCENDIDO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #3        * MODIFICA PARTE DEL ENCABEZADO
INCLH16 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH16
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'M'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM E1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE APAGADO No.1
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH17 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH17
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'1'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM A1 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE ENCENDIDO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH18 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH18
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM E2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE APAGADO No.2
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH19 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH19
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'2'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM A2 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE ENCENDIDO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH20 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH20
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM E3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE APAGADO No.3
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH21 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH21
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'3'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM A3 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE ENCENDIDO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH22 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH22
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM E4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]--------------------------------------------------------[]
*  DOMINGO - HORARIO DE APAGADO No.4
*
*
*   muestra el encabezado correspondiente en pantalla
*   incluir_hr()
*   dirfile := dirfile + 2
*
*[]--------------------------------------------------------[]
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAB    #6        * MODIFICA PARTE DEL ENCABEZADO
INCLH23 LDAA    #$14
        JSR     INST4B
        DECB
        BNE     INCLH23
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'4'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºXX>DM A4 00:00amº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     INCLUIR_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
*[]----------------[]
*
*   .
*   .
*   END { del FOR }
*
*[]----------------[]
        PULB
        INCB
        CMPB    DSCTR
        BLS     NXTDSP
        BRA     EDIT_DEF  * SIGUIENTE SECCION DE DEFINICION DE DISP.
NXTDSP  JMP     PRXDSP


*[]--------------------------------------[]
*  EDITAR LA DEFINICION DE DISPOSITIVOS ?
*[]--------------------------------------[]
EDIT_DEF
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'F'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'P'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
DEF_1   LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºDEF DISP   SI/NOº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        LDAB    #3
DEF_3   LDAA    #$14      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        DECB
        BNE     DEF_3
DEF_4   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DEF_4
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BEQ     EDIC_DEF  * SI HAY DEFINICION DE DISP.
        LDAB    #3
DEF_5   LDAA    #$14      * COLOCA EL CURSOR EN "N"
        JSR     INST4B
        DECB
        BNE     DEF_5
DEF_2   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DEF_2
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     DEF_1
        JMP     SECCFR    * PASA A LA EDICION DE DIAS FERIADOS


*[]----------------------------------------------[]
*
*  SECCION PARA LA DEFINICION DE LOS DISPOSITIVOS
*      ( ALTO CONSUMO / NO ALTO CONSUMO )
*
*[]----------------------------------------------[]
EDIC_DEF
        JSR     DEF_DISP


*[]--------------------------[]
*  EDITAR LOS DIAS FERIADOS ?
*[]--------------------------[]
SECCFR  LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'T'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'F'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'.'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
DESIC_4 LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºEDITAR FER.SI/NOº
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        LDAB    #3
CUR_F_S LDAA    #$14      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        DECB
        BNE     CUR_F_S
DESIC_5 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DESIC_5
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BEQ     SEC_FER   * SI HAY EDICION DE DIAS FERIADOS
        LDAB    #3
CUR_F_N LDAA    #$14      * COLOCA EL CURSOR EN "N"
        JSR     INST4B
        DECB
        BNE     CUR_F_N
DESIC_6 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DESIC_6
        CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BEQ     DESIC_4
        JMP     FIN_PRG   * TERMINA LA PROGRAMACION DEL SISTEMA


*[]------------------------------------------[]
*
*  SECCION PARA LA INCLUSION DE DIAS FERIADOS
*
*[]------------------------------------------[]
SEC_FER LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAA    #'F'
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
*[]-------------------------------[]
*  EDITA LA TABLA DE DIAS FERIADOS
*[]-------------------------------[]
        LDX     #TABLA    * APUNTADOR AL INTERMEDIO DE FERIADO EN RAM
        STX     DIRAM
        LDX     #TFR      * CARGA DIRECCION BASE EN EEPROM FILE
        STX     DIRFILE   * DE LA TABLA DE DIAS FERIADOS
*[]--------------------------------------------------------[]
*
*  ESTADO DE LA PANTALLA EN ESTE LUGAR:  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
*                                        ºFERIADO 04/11/94º
*                                        ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
*
*[]--------------------------------------------------------[]
        JSR     FERIAD
FIN_PRG RTS



*[]---------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PREPARA LA EDICION DEL NUMERO DE DISPOSITIVOS
*  CONTROLADOS Y ESCRIBE ESTE NUEVO VALOR EN LA EEPROM FILE
*
*  ENTRADA: NINGUNA
*  SALIDA:  POINTER ( IX ) AL CAMPO DE # DISP. EN RAM
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_#DCTR, BINBCD, ESCLCD, INST4B,
*                              NUMDSP, WRITE_#DCTR
*
*[]---------------------------------------------------------------[]
DISP_IN JSR    READ_#DCTR * LEE EL NUMERO DE DISPOSITIVOS CONTROLADOS
        CMPA    #24
        BLS     NCR_01    * NO HAY VALOR INCORRECTO EN EL CAMPO
        LDAA    #1        * INICIALIZA EL CAMPO
        JSR   WRITE_#DCTR * ESCRIBE EL NUMERO DE DISPOSITIVOS CONTROLADOS
NCR_01  LDX     #DSCTR    * APUNTA AL NUMERO DE DISPOSITIVOS CONTROLADOS
        STAA    $0,X      * ALMACENA EN RAM EL Num. DE DISPOSITIVOS
        LDAA    $0,X
        JSR     BINBCD
        TAB               * MUESTRA EL VALOR EN PANTALLA
        ASRA
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        BNE     NONUL
        LDAA    #' '
        BRA     NULO
NONUL   ORA     #$30
NULO    JSR     ESCLCD
        TBA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES
        JSR     NUMDSP    * EDITA EL NUMERO DE DISPOSITIVOS
        LDAA    $0,X      * CARGA EL Num. DE DISP. DE RAM
        JSR   WRITE_#DCTR * ESCRIBE EL NUMERO DE DISPOSITIVOS CONTROLADOS
        RTS



*[]---------------------------------------------------------[]
*
*  PROCEDIMIENTO PARA EDITAR Y MODIFICAR EL DIA DE LA SEMANA
*  ACTIVO EN EL SISTEMA
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> LEEBID, INST4B, TECL_IN,
*                              ESCBID
*
*[]---------------------------------------------------------[]
EDTDIA

*[]------------------------------------[]
*   leebid($00,$00,$00,$00,$00,$00,$00)
*[]------------------------------------[]
        CLRA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     LEEBID    * CONSULTA EL A#O ACTIVO EN EL RTC
        PSHX
        TSX
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * INICIA DATA BUS CON BITS DE SALIDA
        STAA    $00
        LDAA    $8,X      * LEE EL DIA DE LA SEMANA ACTUAL


*[]------------------------------------------------[]
*  POSICIONA EL CURSOR EN LA LETRA INDICADA DEL DIA
*[]------------------------------------------------[]
        CMPA    #0        * ES DOMINGO ?
        BNE     SDS_1
        LDAA    #$10      * COLOCA EL CURSOR EN "D"
        JSR     INST4B
        JMP     DMG       * SE DIRIGE A LA ESTACION DOMINGO
SDS_1   CMPA    #6        * ES SABADO ?
        BNE     SDS_2
        LDAB    #3
AVAN_X  LDAA    #$10      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        DECB
        BNE     AVAN_X
        JMP     SBD
SDS_2   CMPA    #5        * ES VIERNES ?
        BNE     SDS_3
        LDAB    #5
AVAN_0  LDAA    #$10      * COLOCA EL CURSOR EN "V"
        JSR     INST4B
        DECB
        BNE     AVAN_0
        JMP     VRN
SDS_3   PSHA
        LDAA    #$02      * COLOCA EL CURSOR EN LA PRIMERA PAGINA
        JSR     INST4B
        PULA
        CMPA    #1        * ES LUNES ?
        BEQ     LNS
        CMPA    #2        * ES MARTES ?
        BNE     SDS_4
        LDAA    #$14      * COLOCA EL CURSOR EN "M"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
        BRA     MRT
SDS_4   CMPA    #3        * ES MIERCOLES ?
        BNE     SDS_5
        LDAB    #4
AVAN_1  LDAA    #$14      * COLOCA EL CURSOR EN "M"
        JSR     INST4B
        DECB
        BNE     AVAN_1
        JMP     MIE
SDS_5   LDAB    #6
AVAN_2  LDAA    #$14      * COLOCA EL CURSOR EN "J"
        JSR     INST4B
        DECB
        BNE     AVAN_2
        JMP     JUE


*[]-------------------------------------------------------[]
*  EDICION DE LOS DIAS DE LA SEMANA -> L  M  M  J  V  S  D
*[]-------------------------------------------------------[]

*[]---------------------[]
*  SECCION DEL DIA LUNES
*[]---------------------[]
LNS     LDAA    #1        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA  "PROG" OPRIMIDA ?
        BEQ     LNS
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C   LDAA    #$14      * COLOCA EL CURSOR EN "M"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
*[]----------------------[]
*  SECCION DEL DIA MARTES
*[]----------------------[]
MRT     LDAA    #2        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     MRT
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C1
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C1  LDAA    #$14      * COLOCA EL CURSOR EN "M"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
*[]-------------------------[]
*  SECCION DEL DIA MIERCOLES
*[]-------------------------[]
MIE     LDAA    #3        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     MIE
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C2
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C2  LDAA    #$14      * COLOCA EL CURSOR EN "J"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
*[]----------------------[]
*  SECCION DEL DIA JUEVES
*[]----------------------[]
JUE     LDAA    #4        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     JUE
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C3
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C3  LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B    * COLOCA EL CURSOR EN "V"
*[]-----------------------[]
*  SECCION DEL DIA VIERNES
*[]-----------------------[]
VRN     LDAA    #5        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     VRN
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C4
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C4  LDAA    #$14      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
*[]----------------------[]
*  SECCION DEL DIA SABADO
*[]----------------------[]
SBD     LDAA    #6        * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     SBD
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     SDS_C5
        JMP     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
SDS_C5  LDAA    #$14      * COLOCA EL CURSOR EN "D"
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
*[]-----------------------[]
*  SECCION DEL DIA DOMINGO
*[]-----------------------[]
DMG     CLRA              * NUMERO DEL DIA EN EL BID
        STAA    $8,X
        JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DMG
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BEQ     SDS_S     * ACTIVA EL DIA DE LA SEMANA EN EL RTC
        LDAA    #$02      * COLOCA EL CURSOR EN "L"
        JSR     INST4B
        JMP     LNS


*[]---------------------------------------------[]
*  SE DEBE OPRIMIR CUALQUIER TECLA PARA TERMINAR
*[]---------------------------------------------[]
SDS_S   LDAB    $8,X      * LEE EL DIA DE LA SEMANA
        PULX
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        TBA               * ACTUALIZA EL DIA DE LA SEMANA EN EL BID
        PSHA
        LDAA    #$AA      * SIN MODIFICAR EL RESTO DE LOS CAMPOS
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     ESCBID    * ACTIVA EL DIA DE LA SEMANA EN EL BID
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        RTS



*[]---------------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE CONTROLA EL ENCENDIDO Y APAGADO DE LOS DISPOSITIVOS
*  CONTROLADOS POR EL SISTEMA
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> LEEBID, READ_FRD, EST_GNRL, READ_TPH,
*                              READ_#DCTR, READ_HR, CAMB_EST, BCDBIN
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]---------------------------------------------------------------------[]
AUTOMA  PSHX

*[]------------------------------------[]
*   leebid($00,$00,$00,$00,$00,$00,$00)
*[]------------------------------------[]
        CLRA
        PSHA              * RESERVA ESPACIO PARA EL BLOQUE DE INTERCAMBIO
        PSHA              * DE DATOS CON EL RTC (BID)
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     LEEBID    * LEE EL BID
        LDX     #TABLA    * APUNTA AL PRIMER REGISTRO DE LA TABLA
        PSHX
        LDX     #TFR      * CARGA DIRECCION BASE EN EEPROM FILE
        STX     DIRFILE   * DE LA TABLA DE DIAS FERIADOS
        PULX
*[]------------------------------------------------------------[]
*
*  VERIFICA PRIMERO LA TABLA DE DIAS FERIADOS:
*
*
*   FOR siempre
*   BEGIN
*      read_frd() { lee el siguiente registro }
*      IF valor dia <> $AA THEN
*         IF dirfile = $0800 THEN
*         BEGIN
*            write_file($AA,tfr) { marca el primer campo }
*            pasa a la ultima parte del procedimiento
*         END
*         IF valor mes = bid.mes AND valor dia = bid.dia THEN
*         BEGIN
*            est_gnrl(0) { apaga todos los dispositivos }
*            sale a la ultima parte del procedimiento
*         END
*      ELSE
*         pasa a comprobar los horarios
*      dirfile := dirfile + 2 { siguiente registro de feriado }
*   END
*
*[]------------------------------------------------------------[]
WHL_1   JSR     READ_FRD  * LEE EL SIGUIENTE CAMPO EN LA EEPROM FILE
        LDAA    $0,X      * LEE EL VALOR DEL DIA EN ESA POSICION
        CMPA    #$AA      * ES PRIMERO DISPONIBLE ?
        BNE     WHL_2
        JMP     WHL_X     * PASA A COMPROBAR EL HORARIO DE TRABAJO
WHL_2   PSHX
        LDX     DIRFILE
        CPX     #$0800
        PULX
        BNE     WHL_4
        LDAA    #$AA
        PSHA
        LDX     #TFR
        PSHX
        JSR   WRITE_FILE  * MARCA EL PRIMER CAMPO COMO DISPONIBLE
        PULX
        PULA
        JMP     WHL_Z
WHL_4   LDAA    $1,X      * LEE EL VALOR DEL MES EN LA TABLA
        PSHX
        TSX
        LDAB    $6,X      * LEE EL VALOR DEL MES ACTUAL
        CBA               * COMPARA AMBOS VALORES
        BEQ     WHL_3
        BRA     WHL_Y
WHL_3   PULX
        LDAA    $0,X      * LEE EL VALOR DEL DIA EN LA TABLA
        PSHX
        TSX
        LDAB    $7,X      * LEE EL VALOR DEL DIA DE HOY
        CBA
        BNE     WHL_Y     * SI NO SON IGUALES PASA AL SIGUIENTE
        CLRA              * APAGA TODOS LOS DISPOSITIVOS CONTROLADOS
        JSR     EST_GNRL
        PULX
        JMP     WHL_Z
WHL_Y   PULX
        PSHX
        LDX     DIRFILE
        INX               * PASA AL SIGUIENTE CAMPO DE LA TABLA
        INX
        STX     DIRFILE
        PULX
        BRA     WHL_1     * COMPRUEBA ESA FECHA
*[]------------------------------------------[]
*
*   { direccion al horario }
*   dirfile := basehr
*   dsctr := read_#dctr
*   dspcont := 1 { contador de dispositivos }
*
*[]------------------------------------------[]
WHL_X   LDX     #BASEHR   * APUNTADOR A LA TABLA DE HORARIO INDIVIDUAL
        STX     DIRFILE
        JSR    READ_#DCTR * LEE EL NUMERO DE DISP. CONTROLADOS
*[]---------------------------------------------------------[]
*  ELIGE EL DIA DE LA SEMANA PARA LUEGO COMPROBAR SU HORARIO
*[]---------------------------------------------------------[]
        STAA    DSCTR     * ACTIVA LA VARIABLE NUMERO DE DISP. EN RAM
        CLR     ALTC      * INICIA EL INDICADOR DE ARRANQUE ESPECIAL
        LDAB    #1        * INICIA EL CONTADOR DE COMPROBACIONES
        STAB    DSPCONT
*[]--------------------------------------------[]
*
*   IF bid.dia_semana = 0 THEN
*      dirfile := dirfile + 32 { es domingo }
*   ELSE
*      IF bid.dia_semana > 5 THEN
*         dirfile := dirfile + 16 { es sabado }
*
*[]--------------------------------------------[]
        TSX
        LDAA    $6,X
        LDX     DIRFILE
        CMPA    #0
        BNE     NODOM
        LDAB    #32       * DIRFILE <- DIRFILE + 32
        ABX
        BRA     NEXT_DP
NODOM   CMPA    #5
        BLS     NEXT_DP
        LDAB    #16       * DIRFILE <- DIRFILE + 16
        ABX
*[]------------------------------------------------[]
*
*   FOR dspcont := 1 TO dsctr DO
*   BEGIN
*      diram := ^enc1
*      { extraccion de horarios de la eeprom file }
*      FOR contador temp := 1 TO 8 DO
*      BEGIN
*         read_hr(diram ,dirfile )
*         dirfile := dirfile + 2
*         diram := diram + 2
*      END
*      diram := ^enc1
*      dirfile := dirfile - 16
*      .
*      .
*      comprueba los horarios
*      .
*      .
*
*[]------------------------------------------------[]
NEXT_DP STX     DIRFILE
        LDX     #ENC1
        STX     DIRAM
        LDAB    #1        * CONTADOR TEMP
        BRA     CNTMP_1
CNTMP_2 JSR     READ_HR
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
        LDX     DIRAM
        INX
        INX
        STX     DIRAM
        INCB
CNTMP_1 CMPB    #8
        BLS     CNTMP_2
        LDX     #ENC1
        STX     DIRAM
        LDD     DIRFILE   * DIRFILE <- DIRFILE - 16
        SUBD    #16
        STD     DIRFILE
*[]--------------------------------------------------------------------[]
*  PREPARA EL HORARIO DEL DIA PARA SU VERIFICACION
*
*  VARIABLE ( 16 BITS ) HACTM -> |  hora actual  | minutos (fraccion) |
*[]--------------------------------------------------------------------[]
        PSHX
        TSX
        LDAA    $4,X      * CARGA LA HORA ACTUAL
        JSR     BCDBIN    * CONVIERTE EL VALOR EN BINARIO NATURAL
        LDAB    $3,X      * CARGA EL DATO AM/PM ACTUAL
        CMPB    #1        * ES PM ?
        BNE     CER_1
        CMPA    #12       * SON LAS 12 pm ?
        BEQ     CER_X
        ADDA    #12       * CONVIERTE EN FORMATO DE HORA MILITAR
        BRA     CER_X
CER_1   CMPA    #12       * SON LAS 12 am ?
        BNE     CER_X
        CLRA              * FORMATO DE HORA MILITAR ( 22 -> 23 -> 0 ... )
CER_X   TAB
        LDAA    $2,X      * CARGA LOS MINUTOS ACTUALES
        JSR     BCDBIN    * CONVIERTE A BINARIO NATURAL ( FRACCION )
        PSHB
        TAB               * COLOCA EN ACCB LA FRACCION DE HORA ( MINUTOS )
        PULA              * COLOCA EN ACCA LA HORA ACTUAL MILITAR
        STD     HACTM     * ALMACENA ( D ) EL VALOR DE LA HORA ACTUAL ( HM:MIN )
        PULX
*[]-----------------------------------------------------------------[]
*
*  ALGORITMO DEL HORARIO SEGMENTADO: ( Para 4 horarios )
*
*   indst := ^stat1
*   FOR indhr := ^enc1 TO ^enc4 STEP indhr + 4 , indst + 1 DO
*      IF indhr[hora de encendido] = indhr[hora de apagado] THEN
*         status[indst] := 0 { fuerza el status 0 }
*      ELSE
*      BEGIN
*         IF indhr[hora de encendido] < indhr[hora de apagado] THEN
*         BEGIN { apagado/encendido/apagado }
*            mapa de segmentos := 2
*            hora menor := indhr[hora de encendido]
*            hora mayor := indhr[hora de apagado]
*         END
*         ELSE
*         BEGIN { encendido/apagado/encendido }
*            mapa de segmentos := 5
*            hora menor := indhr[hora de apagado]
*            hora mayor := indhr[hora de encendido]
*         END
*         IF hora actual < hora menor THEN mascara := 4
*         ELSE
*            IF hora actual < hora mayor THEN mascara := 2
*            ELSE mascara := 1
*         IF ( mapa de segmentos AND mascara ) <> 0 THEN
*            status[indst] := 1
*         ELSE status[indst] := 0
*      END
*   IF ( status[0] OR status[1] OR status[2] OR status[3] ) = 1 THEN
*      enciende el dispositivo
*   ELSE apaga el dispositivo
*
*[]-----------------------------------------------------------------[]
        LDX     #STATUS   * INDST <- DIRECCION DE STATUS[0]
        STX     INDST
        LDX     #ENC1     * INDHR <- DIRECCION DE ENC1
        STX     INDHR
        BRA     S_10
S_11    LDD     $0,X      * INDHR [HORA DE ENCENDIDO]
        SUBD    $2,X      * INDHR [HORA DE APAGADO]
        BNE     S_14
        LDX     INDST
        CLRA              * STATUS [INDST] <- 0
        STAA    $0,X
        BRA     S_15
S_14    BPL     S_12
        LDAA    #2        * AP / EN / AP (MAPA DE SEGMENTOS)
        PSHA
        LDD     $0,X      * INDHR [HORA DE ENCENDIDO]
        PSHB              * HORA MENOR
        PSHA
        LDD     $2,X      * INDHR [HORA DE APAGADO]
        PSHB              * HORA MAYOR
        PSHA
        BRA     S_02
S_12    LDAA    #5        * EN / AP / EN (MAPA DE SEGMENTOS)
        PSHA
        LDD     $2,X      * INDHR [HORA DE APAGADO]
        PSHB              * HORA MENOR
        PSHA
        LDD     $0,X      * INDHR [HORA DE ENCENDIDO]
        PSHB              * HORA MAYOR
        PSHA
S_02    TSX
        LDD     HACTM
        SUBD    $2,X      * HACTM - HORA MENOR
        BPL     S_03
        LDAA    #4        * MASCARA
        BRA     S_05
S_03    LDD     HACTM
        SUBD    $0,X      * HACTM - HORA MAYOR
        BPL     S_04
        LDAA    #2        * MASCARA
        BRA     S_05
S_04    LDAA    #1        * MASCARA
S_05    BITA    $4,X      * MAPA DE SEGMENTOS AND MASCARA
        BNE     STAT_1
        CLRA              * STATUS [INDST] <- 0
        BRA     S_13
STAT_1  LDAA    #1        * STATUS [INDST] <- 1
S_13    LDX     INDST
        STAA    $0,X
        PULX
        PULX
        PULA
S_15    LDX     INDHR    * INDHR <- INDHR + 4
        INX
        INX
        INX
        INX
        STX     INDHR
        LDX     INDST    * INDST <- INDST + 1
        INX
        STX     INDST
S_10    LDX     INDHR
        CPX     #ENC4
        BLS     S_11
        LDX     #STATUS
        LDAA    $0,X
        ORA     $1,X
        ORA     $2,X
        ORA     $3,X
        BNE     EST_EN
        LDAA    DSPCONT   * NUMERO DEL DISPOSITIVO COMPROBADO
        PSHA
        CLRA              * APAGA EL DISPOSITIVO
        PSHA
        JSR     CAMB_EST
        PULA
        PULA
        BRA     TR_01
EST_EN  LDAA    DSPCONT   * NUMERO DEL DISPOSITIVO COMPROBADO
        PSHA
        LDAA    #1        * ENCIENDE EL DISPOSITIVO
        PSHA
        JSR     CAMB_EST
        PULA
        PULA
*[]-----------------------------------------------[]
*
*   dspcont := dspcont + 1
*   IF dspcont <= dsctr THEN
*      { calcula la siguiente direccion efectiva }
*      dirfile := dirfile + 48
*      { continua con  el ciclo de comprobacion }
*   ELSE
*      { parte final del procedimiento }
*
*[]-----------------------------------------------[]
TR_01   INC     DSPCONT   * PROXIMO DISP. PARA COMPROBAR
        LDAB    DSPCONT
        CMPB    DSCTR     * COMPROBADOS TODOS LOS DISP. ?
        BHI     WHL_Z
        LDX     DIRFILE
        LDAB    #48       * DESPLAZAMIENTO DENTRO DE LA TABLA DE HORARIOS
        ABX               * DIRFILE <- DIRFILE + 48
        JMP     NEXT_DP
*[]-----------------------------[]
*  PARTE FINAL DEL PROCEDIMIENTO
*[]-----------------------------[]
WHL_Z   PULA              * LIBERA ESPACIO RESERVADO A EL BID
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        PULX
        RTS



*[]-------------------------------------------------[]
*
*  PROCEDIMIENTO PARA CAMBIAR EL ESTADO DE TODOS LOS
*  DISPOSITIVOS CONTROLADOS POR EL SISTEMA
*
*  ENTRADA: NUEVO ESTADO EN ACCA -> 0 ( APAGAR )
*                                -> 1 ( ENCENDER )
*  SALIDA: NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_#DCTR, CAMB_EST
*
*
*  DETALLE PROCEDIMENTAL:
*
*   accb := acca { ACCB contiene el nuevo estado }
*   FOR acca := 1 TO read_#dctr() DO
*   BEGIN
*      camb_est(acca ,accb )
*   END
*
*[]-------------------------------------------------[]
EST_GNRL
        PSHX
        PSHA              * GUARDA EL NUEVO ESTADO
        JSR    READ_#DCTR
        PULB              * RECUPERA EN ACCB EL NUEVO ESTADO
        PSHA              * NUMERO DE DISPOSITIVOS CONTROLADOS
        TSX
        LDAA    #1        * INICIA EL CONTADOR DE DISPOSITIVOS
C_ST_D  PSHA              * ACCA CONTIENE EL NUMERO DEL DISPOSITIVO
        PSHB
        JSR     CAMB_EST
        PULB
        PULA
        INCA
        CMPA    $0,X      * NUMERO DE DISPOSITIVOS CONTROLADOS
        BLS     C_ST_D
        PULA
        PULX
        RTS



*[]-------------------------------------------------[]
*
*  PROCEDIMIENTO QUE CAMBIA EL ESTADO DE UNO DE LOS
*  DISPOSITIVOS CONTROLADOS
*
*  ENTRADA: PARAMETRO 1 -> NUMERO DEL DISPOSITIVO
*           PARAMETRO 2 -> NUEVO ESTADO
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> WRITE_FILE, READ_EST,
*                              READ_DEF, READ_#DCTR,
*                              INST4B, ESCLCD,
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]-------------------------------------------------[]
CAMB_EST
        PSHX
        TSX
        PSHB
*[]---------------------------------------------------[]
*   acca := read_est( PARAMETRO 1 ) { lee el estado }
*   IF acca <> PARAMETRO 2 THEN
*      { procede a cambiar el estado del dispositivo }
*[]---------------------------------------------------[]
        LDAA    $5,X      * CARGA EL NUMERO DEL DISPOSITIVO
        JSR     READ_EST  * LEE EL ESTADO DEL DISPOSITIVO
        CMPA    $4,X      * COMPARA EL VALOR NUEVO CONTRA EL ACTUAL
        BNE     ACTUAL
        JMP     NO_ACT
*[]----------------------------------------------------------[]
*  ACCIONES NECESARIAS PARA CAMBIAR EL ESTADO DEL DISPOSITIVO
*[]----------------------------------------------------------[]
ACTUAL  LDAA    $5,X      * CARGA EL NUMERO DEL DISPOSITIVO

*[]-----------------------------------------------------[]
*   { extrae el bit de definicion para no alterarlo }
*   acca := ( read_def() SHL 1 ) + ( PARAMETRO 1 AND 1 )
*[]-----------------------------------------------------[]
        JSR     READ_DEF  * LEE EL INDICADOR DE DELAY
        ASLA
        LDAB    $4,X      * CARGA EL NUEVO ESTADO
        ANDB    #1
        ABA               * INDICADOR DELAY + NUEVO ESTADO DEL DISP.
        PSHA              * PARAMETRO 1 > NUEVO VALOR DEL CAMPO
        LDAB    $5,X      * CARGA EL NUMERO DEL DISPOSITIVO
        DECB              * ADAPTA EL # DE DISP. PARA INDEXACION
        LDX     #SARRAY   * DIRECCION BASE DENTRO DE LA EEPROM FILE
        ABX
        PSHX              * PARAMETRO 2 > DIRECCION EFECTIVA
*[]----------------------------------------------------------[]
*  ACTIVA EL BIT DE ESTADO DEL DISPOSITIVO CON EL NUEVO VALOR
*[]----------------------------------------------------------[]
        JSR    WRITE_FILE
        PULX
        PULA
*[]--------------------------------------------------------------[]
*  PREPARA LAS VARIABLES PARA EL PROCESO DE ACTIVACION DE SALIDAS
*[]--------------------------------------------------------------[]
        CLRA
        STAA    BITCONT   * INICIA EL CONTADOR DE BITS ( SALIDAS )
        LDX     #SALIDAS  * PREPARA EL INDICE DE SALIDAS
        STAA    $0,X      * SALIDAS[0] = 0
        STAA    $1,X      * SALIDAS[1] = 0
        STAA    $2,X      * SALIDAS[2] = 0
*[]-------------------------------------------------------------------------[]
*
*   FOR contador de dispositivos := 1 TO numero de disp DO
*   BEGIN
*      acca := read_est(contador de dispositivos)
*      { la constante 17 es el bit 0 de salidas[2] }
*      { la constante  9 es el bit 0 de salidas[1] }
*      IF contador de dispositivos = 17 OR contador de dispositivos = 9 THEN
*      BEGIN
*         indice de salidas := indice de salidas + 1
*         bitcont := 0
*      END
*      { a continuacion coloca el bit de estado en su posicion de salida }
*      FOR accb := bitcont DOWNTO 0 DO acca := acca SHL 1
*      bitcont := bitcont + 1
*      { coloca el bit de estado en el vector de salidas }
*      salidas[ indice de salidas ] := salidas[ indice de salidas ] OR acca
*   END
*
*[]-------------------------------------------------------------------------[]
        JSR    READ_#DCTR * LEE EL NUMERO DE DISPOSITIVOS CONTROLADOS
        LDAB    #1        * INICIA EL CONTADOR DE DISPOSITIVOS
        BRA     D_01
D_02    PSHA              * ALMACENA EL NUMERO DE DISPOSITIVOS
        PSHB              * ALMACENA EL CONTADOR DE DISPOSITIVOS
        TBA
        JSR     READ_EST  * LEE EL ESTADO DEL DISPOSITIVO
        PULB
D_10    CMPB    #17       * ES EL PRIMER BIT DEL TERCER BYTE DE SALIDA ?
        BNE     D_20
        BRA     D_X1
D_20    CMPB    #9        * ES EL PRIMER BIT DEL SEGUNDO BYTE DE SALIDA ?
        BNE     D_30
D_X1    INX               * SIGUIENTE LATCH
        CLR     BITCONT   * INICIA EL CONTADOR DE BITS ( SALIDAS )
D_30    PSHB
        LDAB    BITCONT   * COLOCA EL BIT EN SU POSICION DE SALIDA
        BRA     D_40
D_50    ASLA              * DESPLAZA EL BIT HASTA SU POSICION
        DECB
D_40    CMPB    #0
        BNE     D_50
        INC     BITCONT   * SIGUIENTE POSICION
        PULB
        ORAA    $0,X      * ADICIONA EL BIT A LA SALIDA
        STAA    $0,X
        INCB              * INCREMENTA EL CONTADOR DE DISPOSITIVOS
        PULA              * CARGA EL NUMERO DE DISPOSITIVOS
D_01    CBA
        BPL     D_02
*[]-------------------------------------------------[]
*  VERIFICA SI EL DISPOSITIVO ES DE ALTO CONSUMO
*  Y SI EL NUEVO ESTADO ES ENCENDIDO
*
*  IF read_def = 1 AND nuevo estado = 1 THEN
*  BEGIN
*     muestra la pantalla de arranque especial
*     .
*     .
*     espera de 3 minutos para el primer dispositivo
*     y de 15 segundos para el resto de alto consumo
*     .
*     .
*  END
*[]-------------------------------------------------[]
        TSX               * X <- SP + 1
        LDAA    $6,X      * CARGA EL NUMERO DEL DISPOSITIVO
        JSR     READ_DEF  * LEE EL BIT DE DEFINICION DEL DISP.
        CMPA    #1        * ES DE ALTO CONSUMO ?
        BEQ     IF_02
        JMP     OUTPUTS
IF_02   LDAA    $5,X      * CARGA EL NUEVO ESTADO DEL DISPOSITIVO
        CMPA    #1        * ORDEN DE ENCENDIDO ?
        BEQ     IF_04
        JMP     OUTPUTS
*[]----------------------------------------[]
*  MUESTRA LA PANTALLA DE ARRANQUE ESPECIAL
*[]----------------------------------------[]
IF_04   LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'*'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'R'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'Q'
        JSR     ESCLCD
        LDAA    #'U'
        JSR     ESCLCD
        LDAA    #'E'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'*'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
*[]--------------------------------------------------------------[]
*
*  IMPORTANTE:
*
*  PARA ARRANCAR EL PRIMER DISPOSITIVO DE ALTO CONSUMO, LA ESPERA
*  DEBE SER DE 3 MINUTOS. SI HAY MAS DISPOSITIVOS DE ALTO CONSUMO
*  ENTONCES LA ESPERA SERA DE 15 SEGUNDOS
*
*[]--------------------------------------------------------------[]
        LDAA    ALTC      * CARGA EL INDICADOR DE PRIMERO ALTO CONSUMO
        BEQ     IF_03     * ES EL PRIMERO DE ALTO CONSUMO PROCESADO ?
*[]---------------------------------------------------------[]
*  ESPERA DE N MINUTOS PARA LOS DISPOSITIVOS DE ALTO CONSUMO
*[]---------------------------------------------------------[]
        LDAA    #LAPSO2   * ESPERA 15 SEGUNDOS PARA ENCENDER EL SIGUIENTE
        BRA     ARRANQ
IF_03   LDAA    #LAPSO    * ESPERA 3 MINUTOS PARA ENCENDER EL PRIMERO
        INC     ALTC
ARRANQ  STAA    FRACMIN
        CLI               * HABILITA LAS INTERRUPCIONES
M_3_T   LDAA    FRACMIN
        CMPA    #0        * CUMPLIDO EL CONTEO ?
        BNE     M_3_T
        SEI               * DESHABILITA LAS INTERRUPCIONES
*[]---------------------------------------------------------------[]
*
*   LTCH_1 := SALIDAS[0] { envia los nuevos estados a su latch 1 }
*   LTCH_2 := SALIDAS[1] { envia los nuevos estados a su latch 2 }
*   LTCH_3 := SALIDAS[2] { envia los nuevos estados a su latch 3 }
*
*[]---------------------------------------------------------------[]
OUTPUTS LDX     #SALIDAS  * APUNTADOR AL VECTOR "SALIDAS"
        LDAA    $0,X
        STAA    LTCH_1
        LDAA    $1,X
        STAA    LTCH_2
        LDAA    $2,X
        STAA    LTCH_3
NO_ACT  PULB
        PULX
        RTS



*[]-------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE MUESTRA EL ESTADO DE TODOS LOS DISPOSITIVOS
*  CONTROLADOS POR EL SISTEMA
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_#DCTR, READ_SD, TECL_IN
*
*[]-------------------------------------------------------------[]
ESTADO_DISP
        JSR    READ_#DCTR * LEE EL NUMERO DE DISPOSITIVOS CONTROLADOS
TODOS   PSHA
        JSR     READ_SD
IND_3   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     IND_3
        PULA
        DECA              * SIGUIENTE DISPOSITIVO CONTROLADO
        BNE     TODOS
        RTS



*[]---------------------------------------------[]
*
*  PROCEDIMIENTO QUE LEE EL ESTADO DE UNO DE LOS
*  DISPOSITIVOS CONTROLADOS Y LO MUESTRA EN LCD
*
*  ENTRADA: NUMERO DEL DISPOSITIVO EN ACCA
*  SALIDA:  ESTADO DEL DISPOSITIVO EN ACCA
*                           0 -> APAGADO
*                           1 -> ENCENDIDO
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, ESCLCD
*                              BINBCD, READ_EST
*
*[]---------------------------------------------[]
READ_SD PSHB
        PSHA
        LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        LDAA    #'D'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'P'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        PULA
        PSHA              * GUARDA EL NUMERO DE DISP. PARA USO FUTURO
        JSR     BINBCD
        TAB
        ASRA              * PREPARA EL DIGITO DE LAS DECENAS PARA
        ASRA              * EL NUMERO DEL DISPOSITIVO
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * MUESTRA EL CARACTER
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE LAS UNIDADES PARA
        ORA     #$30      * EL NUMERO DEL DISPOSITIVO
        JSR     ESCLCD
        LDAA    #'>'
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        PULA              * RECUPERA EL NUMERO DE DISP.
        JSR     READ_EST
        ORA     #$30      * ASCII DEL VALOR LEIDO
        JSR     ESCLCD    * MUESTRA EL ESTADO DEL DISPOSITIVO
        PULB
        RTS



*[]--------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE REGRESA EL ESTADO DE UN DISPOSITIVO INDICADO
*
*  ENTRADA: ACCA -> NUMERO DEL DISPOSITIVO INDICADO
*  SALIDA:  ACCA -> ESTADO DEL DISPOSITIVO INDICADO
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE
*
*[]--------------------------------------------------------------[]
READ_EST
        PSHX
        PSHB
        TAB
        LDX     #SARRAY   * APUNTA AL INICIO DE LA TABLA DE DISPOSITIVOS
        DECB
        ABX               * APUNTA AL CAMPO DEL DISPOSITIVO INDICADO
        PSHX
        JSR     READ_FILE * LEE EL CAMPO PARA ESE DISPOSITIVO
        PULX
        ANDA    #1        * ENMASCARA EL ESTADO DEL DISPOSITIVO
        PULB
        PULX
        RTS



*[]----------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE INCLUIR LA HORA DE ENCENDIDO O APAGADO
*  DE CUALQUIER DIA DE LA SEMANA Y PARA CUALQUIER TIPO DE HORARIO
*
*  ENTRADA: VAR DIRFILE -> DIRECCION DEL CAMPO EN EEPROM FILE
*           VAR DIRAM   -> DIRECCION DEL CAMPO EN RAM
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_HR, ESCLCD, MODHORA, WRITE_HR
*
*[]----------------------------------------------------------------[]
INCLUIR_HR
        PSHB
        PSHX
*[]------------------------------------------------------------------------[]
*  CARGA EL CAMPO DE LA HORA INDICADO POR "DIRFILE" EN LA DIRECCION "DIRAM"
*[]------------------------------------------------------------------------[]
        JSR     READ_HR   * LEE EL CAMPO DE HORARIO DE LA EEPROM FILE
        JSR     MIL2NOR   * CONVIERTE DE FORMATO MILITAR A FORMATO NORMAL
        LDX     #HRFORN
        LDAA    $0,X      * MUESTRA LA HORA
        TAB
        ASRA
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        BNE     NOESP
        LDAA    #' '
        BRA     ESPC
NOESP   ORA     #$30
ESPC    JSR     ESCLCD
        TBA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        LDAA    #':'
        JSR     ESCLCD
        LDAA    $1,X      * MUESTRA LOS MINUTOS
        TAB
        ASRA
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        TBA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        LDAA    $2,X      * MUESTRA EL DATO AM/PM
        ANDA    #$01
        BEQ     AM
        LDAA    #'p'
        BRA     SIMB_M
AM      LDAA    #'a'
SIMB_M  JSR     ESCLCD
        LDAA    #'m'
        JSR     ESCLCD
*[]--------------------------------------------------------[]
*  EDITA EL CAMPO DE LA HORA CON IX COMO APUNTADOR AL CAMPO
*[]--------------------------------------------------------[]
        JSR     MODHORA   * EDITA EL CAMPO DE HORA
        JSR     NOR2MIL   * CONVIERTE DE FORMATO NORMAL A FORMATO MILITAR
        JSR     WRITE_HR  * ESCRITURA DEL CAMPO
        PULX
        PULB
        RTS



*[]--------------------------------------------------[]
*
*  PROCEDIMIENTO QUE CONVIERTE UN REGISTRO DE HORARIO
*  DEL FORMATO MILITAR AL FORMATO NORMAL HH:MM:am
*
*  ENTRADA: VAR DIRAM APUNTANDO AL REGISTRO
*  SALIDA:  VAR HRFORN CONTENIENDO EL REG. CONVERTIDO
*
*
*  DETALLE PROCEDIMENTAL:
*
*
*   IF diram.hora >= 12 THEN
*   BEGIN
*      IF diram.hora = 24 THEN
*         hrforn.meridiano := 0 { am }
*      ELSE hrforn.meridiano := 1 { pm }
*      hrforn.hora := diram.hora - 12
*   END
*   ELSE
*   BEGIN
*      hrforn.meridiano := 0 { am }
*      hrforn.hora := diram.hora
*   END
*   hrforn.minutos := binbcd( diram.minutos )
*   hrforn.hora := binbcd( hrforn.hora )
*
*[]--------------------------------------------------[]
MIL2NOR PSHA
        PSHX
        LDX     DIRAM
        LDAA    $0,X
        CMPA    #12
        BMI     M2N_1
        CMPA    #24
        LDX     #HRFORN
        BNE     M2N_2
        CLRA
        STAA    $2,X
        BRA     M2N_3
M2N_2   LDAA    #1
        STAA    $2,X
M2N_3   LDX     DIRAM
        LDAA    $0,X
        SUBA    #12
        LDX     #HRFORN
        STAA    $0,X
        BRA     M2N_4
M2N_1   LDX     #HRFORN
        CLRA
        STAA    $2,X
        LDX     DIRAM
        LDAA    $0,X
        LDX     #HRFORN
        STAA    $0,X
M2N_4   LDX     DIRAM
        LDAA    $1,X
        JSR     BINBCD
        LDX     #HRFORN
        STAA    $1,X
        LDAA    $0,X
        JSR     BINBCD
        STAA    $0,X
        PULX
        PULA
        RTS



*[]--------------------------------------------------[]
*
*  PROCEDIMIENTO QUE CONVIERTE UN REGISTRO DE HORARIO
*  DEL FORMATO NORMAL HH:MM:am AL FORMATO MILITAR
*
*  ENTRADA: VAR HRFORN CONTENIENDO EL REGISTRO
*  SALIDA:  VAR DIRAM APUNTA AL REGISTRO CONVERTIDO
*
*
*  DETALLE PROCEDIMENTAL:
*
*
*   diram.hora := bcdbin( hrforn.hora )
*   IF hrforn.meridiano = 1 THEN
*      IF diram.hora <> 12 THEN
*         diram.hora := diram.hora + 12
*   ELSE
*      IF diram.hora = 12 THEN diram.hora := 24
*   diram.minutos := bcdbin( hrforn.minutos )
*
*[]--------------------------------------------------[]
NOR2MIL PSHA
        PSHX
        LDX     #HRFORN
        LDAA    $0,X
        JSR     BCDBIN
        LDX     DIRAM
        STAA    $0,X
        LDX     #HRFORN
        LDAA    $2,X
        CMPA    #1
        BNE     N2M_1
        LDX     DIRAM
        LDAA    $0,X
        CMPA    #12
        BEQ     N2M_2
        ADDA    #12
        STAA    $0,X
        BRA     N2M_2
N2M_1   LDX     DIRAM
        LDAA    $0,X
        CMPA    #12
        BNE     N2M_2
        LDAA    #24
        STAA    $0,X
N2M_2   LDX     #HRFORN
        LDAA    $1,X
        JSR     BCDBIN
        LDX     DIRAM
        STAA    $1,X
        PULX
        PULA
        RTS



*[]--------------------------------------------------------[]
*
*  PROCEDIMIENTO PARA MODIFICAR EL REGISTRO DE HORARIO PARA
*  CADA DIA DE LA SEMANA Y PARA CADA FECHA FERIADA
*
*  ENTRADA: INDICE IX APUNTANDO AL REGISTRO A MODIFICAR
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, ESCLCD, TECL_IN
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]--------------------------------------------------------[]
MODHORA LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION
        JSR     INST4B    * DE LAS UNIDADES DE LA HORA
        LDAA    #$14
        JSR     INST4B
        JMP     DSHOR     * COMPRUEBA LAS TECLAS OPRIMIDAS


*[]---------------------------------------------------------------[]
*
*                SECCION PARA EL CAMBIO DE LA HORA
*
*
*   WHILE tecl_in = t_modif OR tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = prog THEN
*      BEGIN
*         { decrementa la hora del sistema, teniendo cuidado de }
*         { pasar de 12 am/pm a 11 am/pm                        }
*         IF reg.hora.unidad = 2 AND reg.hora.decena = 1 THEN
*            reg.meridiano := reg.meridiano XOR 1 { negacion }
*         IF reg.hora.unidad = 1 AND reg.hora.decena = 0 THEN
*         BEGIN
*            reg.hora.unidad := 2
*            reg.hora.decena := 1
*         END
*         ELSE
*            IF reg.hora.unidad = 0 AND reg.hora.decena = 1 THEN
*            BEGIN
*               reg.hora.unidad := 9
*               reg.hora.decena := 0
*            END
*            ELSE reg.hora.unidad := reg.hora.unidad - 1
*      END
*      ELSE
*         { incrementa la hora del sistema, teniendo cuidado de }
*         { pasar de 12 am/pm a 1 am/pm                         }
*         IF reg.hora.unidad = 2 AND reg.hora.decena = 1 THEN
*         BEGIN
*            reg.hora.unidad := 1 { pasa de 12 a 1 }
*            reg.hora.decena := 0
*         END
*         ELSE
*         BEGIN
*            reg.hora.unidad := reg.hora.unidad + 1
*            IF reg.hora.unidad <> 2 THEN
*               IF reg.hora.unidad = $0A THEN { incremento en BCD }
*               BEGIN
*                  reg.hora.unidad := 0
*                  reg.hora.decena := reg.hora.decena + 1
*               END
*               ELSE
*                  IF reg.hora.decena = 1 THEN
*                     reg.meridiano := reg.meridiano XOR 1 { negacion }
*         END
*      .
*      .
*      { muestra el nuevo valor de la hora }
*      .
*      .
*   END
*
*[]---------------------------------------------------------------[]
DECRHR2 LDAA    $0,X      * CARGA EL VALOR DE LA HORA
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #2        * REG.HORA.UNIDAD
        BNE     DCHR2_1
        CMPA    #$10      * REG.HORA.DECENA
        BNE     DCHR2_1
        PSHA
        LDAA    $2,X      * REG.MERIDIANO
        EORA    #$01      * NEGACION DEL VALOR AM/PM
        ANDA    #1
        STAA    $2,X      * REG.MERIDIANO
        PULA
DCHR2_1 CMPB    #1        * REG.HORA.UNIDAD
        BNE     DCHR2_2
        CMPA    #0        * REG.HORA.DECENA
        BNE     DCHR2_2
        LDAB    #2        * REG.HORA.UNIDAD
        LDAA    #$10      * REG.HORA.DECENA
        BRA     APEND
DCHR2_2 CMPB    #0        * REG.HORA.UNIDAD
        BNE     DCHR2_3
        CMPA    #$10      * REG.HORA.DECENA
        BNE     DCHR2_3
        LDAB    #9        * REG.HORA.UNIDAD
        LDAA    #0        * REG.HORA.DECENA
        BRA     APEND
DCHR2_3 DECB              * REG.HORA.UNIDAD
        BRA     APEND
INCRHR2 LDAA    $0,X      * CARGA EL VALOR DE LA HORA
        TAB
        ANDB    #$F0
        ANDA    #$0F      * INCREMENTA EL DIGITO MENOS SIGNIFICATIVO
        CMPA    #$02      * SON LAS 12 O LAS 2 ?
        BNE     INCRH
        CMPB    #$10
        BNE     INCRH
        LDAA    #$01      * PASA DE 12 A 1
        BRA     ALMH      * ALMACENA EL NUEVO VALOR
INCRH   INCA
        CMPA    #$02      * SON LAS 12 O LAS 2 ?
        BNE     MDH2
        CMPB    #$10
        BNE     APEND     * EL VALOR ES 2
        ABA
        STAA    $0,X
        LDAA    $2,X      * CARGA EL DATO AM/PM
        EORA    #$01      * NEGACION DEL VALOR AM/PM
        ANDA    #$01
        STAA    $2,X      * ALMACENA EL NUEVO VALOR
        BRA     MDH3
MDH2    CMPA    #$0A      * INCREMENTO EN BCD
        BNE     APEND
        LDAA    #$10
        BRA     ALMH
APEND   ABA               * FORMA EL VALOR BCD DE LA HORA
ALMH    STAA    $0,X      * ALMACENA EL VALOR DE LA HORA NUEVA
*[]-------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LA HORA EN EL LCD
*[]-------------------------------------------[]
MDH3    LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS
        LDAB    $0,X      * CARGA LA HORA DE LUN. A VIER.
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE HORA
        RORA
        RORA
        RORA
        ANDA    #$0F
        BNE     VALR
        LDAA    #' '
        BRA     MUEST
VALR    ORA     #$30      * ASCII DEL VALOR
MUEST   PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE HORA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
*[]-------------------------------------[]
*  MUESTRA EL NUEVO VALOR DEL DATO AM/PM
*[]-------------------------------------[]
        LDAA    #$03
MDH4    PSHA
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE HORA
        PULA
        DECA
        BNE     MDH4
        LDAA    $2,X      * CARGA EL DATO AM/PM
        ANDA    #$01
        CMPA    #$01
        BEQ     MDH6
        LDAA    #'a'
        JMP     MDH5
MDH6    LDAA    #'p'
MDH5    JSR     ESCLCD
        LDAA    #'m'
        JSR     ESCLCD
        LDAA    #$06
MDH7    PSHA
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE HORA
        PULA
        DECA
        BNE     MDH7
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
DSHOR   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_10
        JMP     DECRHR2   * DECREMENTA EL CAMPO DE LA HORA
MDF_10  CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     NOMOD1
        JMP     INCRHR2   * INCREMENTA EL VALOR DE LA HORA
NOMOD1  LDAA    #$03      * MUEVE EL CURSOR A LA POSICION DE
CAMIN   PSHA              * LAS UNIDADES DE MINUTO
        LDAA    #$14
        JSR     INST4B
        PULA
        DECA
        BNE     CAMIN
        JMP     DSMIN


*[]--------------------------------------------------------------[]
*
*            SECCION PARA EL CAMBIO DE LOS MINUTOS
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF reg.minuto.unidad = 0 AND reg.minuto.decena = 0 THEN
*         BEGIN
*            reg.minuto.unidad := 9
*            reg.minuto.decena := 5
*         END
*         ELSE
*            IF reg.minuto.unidad = 0 THEN
*            BEGIN
*               reg.minutos.unidad := 9
*               reg.minutos.decena := reg.minutos.decena - 1
*            END
*            ELSE reg.minutos.unidad := reg.minutos.unidad - 1
*      END
*      ELSE
*         IF reg.minuto.unidad = 9 THEN
*         BEGIN
*            reg.minuto.unidad := 0 { 59 minutos ? }
*            IF reg.minuto.decena = 5 THEN reg.minuto.decena := 0
*            ELSE reg.minuto.decena := reg.minuto.decena + 1
*         END
*         ELSE reg.minuto.unidad := reg.minuto.unidad + 1
*      .
*      .
*      { muestra el nuevo valor de los minutos }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRMN2 LDAA    $1,X      * CARGA EL VALOR DE LOS MINUTOS
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #0        * REG.MINUTOS.UNIDAD
        BNE     DCMN2_1
        CMPA    #0        * REG.MINUTOS.DECENA
        BNE     DCMN2_1
        LDAB    #9        * REG.MINUTOS.UNIDAD
        LDAA    #$50      * REG.MINUTOS.DECENA
        BRA     MINU3
DCMN2_1 CMPB    #0        * REG.MINUTOS.UNIDAD
        BNE     DCMN2_2
        LDAB    #9        * REG.MINUTOS.UNIDAD
        SUBA    #$10      * REG.MINUTOS.DECENA
        BRA     MINU3
DCMN2_2 DECB              * REG.MINUTOS.UNIDAD
        BRA     MINU3
INCRMN2 LDAA    $1,X      * CARGA EL VALOR DE LOS MINUTOS
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     MINU1
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        CMPA    #$50      * ES EL VALOR LEIDO 59 MINUTOS ?
        BEQ     MINU2
        ADDA    #$10
        BRA     MINU3
MINU2   CLRA              * PASA DE 59 A 00 MINUTOS
        BRA     MINU4
MINU1   INCB
MINU3   ABA
MINU4   STAA    $1,X      * ALMACENA EL NUEVO VALOR DE LOS MINUTOS
*[]-----------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LOS MINUTOS EN EL LCD
*[]-----------------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE MINUTO
        LDAB    $1,X      * CARGA LOS MINUTOS
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE MINUTO
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE MINUTO
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE MINUTO
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
DSMIN   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_11
        JMP     DECRMN2   * DECREMENTA EL CAMPO DE LOS MINUTOS
MDF_11  CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     FHORAR
        JMP     INCRMN2   * INCREMENTA EL CAMPO DE LOS MINUTOS
FHORAR  TBA
        RTS



*[]------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE SELECCIONAR LOS DISPOSITIVOS
*  DE ALTO CONSUMO CONTROLADOS POR EL SISTEMA
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, READ_#DCTR, BINBCD
*                              ESCLCD, WRITE_DEF, TECL_IN
*
*[]------------------------------------------------------[]
DEF_DISP
        LDAA    #$01      * LIMPIA LA PANTALLA PARA EL SIGUIENTE
        JSR     INST4B    * MENSAJE
        JSR    READ_#DCTR
        STAA    DSCTR     * ALMACENA EL NUMERO DE DISPOSITIVOS CONTROLADOS
        LDAB    #1        * INICIALIZA EL CONTADOR DE DISPOSITIVOS
*[]----------------------------------------[]
*  CICLO PARA LA DEFINICION DE DISPOSITIVOS
*[]----------------------------------------[]
DEFINIR LDAA    #$02      * ACTIVA LA PRIMERA PAGINA DEL LCD
        JSR     INST4B
        PSHB              * GUARDA EL NUMERO DE DISP. PARA USO FUTURO
        TBA
        JSR     BINBCD
        TAB
        ASRA              * PREPARA EL DIGITO DE LAS DECENAS PARA
        ASRA              * EL NUMERO DEL DISPOSITIVO
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * MUESTRA EL CARACTER
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE LAS UNIDADES PARA
        ORA     #$30      * EL NUMERO DEL DISPOSITIVO
        JSR     ESCLCD
        LDAA    #'>'
        JSR     ESCLCD
        LDAA    #'A'
        JSR     ESCLCD
        LDAA    #'L'
        JSR     ESCLCD
        LDAA    #'T'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #' '
        JSR     ESCLCD
        LDAA    #'S'
        JSR     ESCLCD
        LDAA    #'I'
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
        LDAA    #'N'
        JSR     ESCLCD
        LDAA    #'O'
        JSR     ESCLCD
*[]---------------------[]
*  SI ES DE ALTO CONSUMO
*[]---------------------[]
DEFDS_1 PULA              * RECUPERA EL NUMERO DEL DISPOSITIVO
        PSHA              * GUARDA EL NUMERO DE DISP. PARA USO FUTURO
        PSHA              * PARAMETRO 1 > NUMERO DEL DISP.
        LDAA    #1
        PSHA              * PARAMETRO 2 > NUEVO VALOR DE LA DEFINICION
        JSR     WRITE_DEF * ES DE ALTO CONSUMO
        PULA
        PULA
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAB    #3
DEFDS_3 LDAA    #$14      * COLOCA EL CURSOR EN "S"
        JSR     INST4B
        DECB
        BNE     DEFDS_3
DEFDS_4 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DEFDS_4
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BEQ     SIG_DEF   * PASA A LA DEFINICION DEL SIGUIENTE DISP.
*[]---------------------[]
*  NO ES DE ALTO CONSUMO
*[]---------------------[]
        PULA              * RECUPERA EL NUMERO DEL DISPOSITIVO
        PSHA              * GUARDA EL NUMERO DE DISP. PARA USO FUTURO
        PSHA              * PARAMETRO 1 > NUMERO DEL DISP.
        CLRA
        PSHA              * PARAMETRO 2 > NUEVO VALOR DE LA DEFINICION
        JSR     WRITE_DEF * NO ES DE ALTO CONSUMO
        PULA
        PULA
        LDAB    #3
DEFDS_5 LDAA    #$14      * COLOCA EL CURSOR EN "N"
        JSR     INST4B
        DECB
        BNE     DEFDS_5
DEFDS_2 JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BEQ     DEFDS_2
        CMPB    #T_PROX   * TECLA "PROX" OPRIMIDA ?
        BNE     DEFDS_1
SIG_DEF PULB
        INCB              * SIGUIENTE DISPOSITIVO
        CMPB    DSCTR
        BHI     TERM_DEF
        JMP     DEFINIR
TERM_DEF
        RTS



*[]----------------------------------------------------------[]
*
*  PROCEDIMIENTO PARA LA INCLUCION Y EDICION DE DIAS FERIADOS
*
*  ENTRADA: VAR DIRFILE -> DIRECCION BASE DE LA TABLA DE DIAS
*                          FERIADOS EN LA EEPROM FILE
*           VAR DIRAM   -> DIRECCION BASE DE LA VARIABLE
*                          INTERMEDIA EN RAM
*  SALIDA: NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, READ_FRD, ESCLCD,
*                              LEEBID, INFECHA, WRITE_FRD
*
*[]----------------------------------------------------------[]
FERIAD  LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        JSR     READ_FRD  * LEE EL SIGUIENTE FERIADO DE LA EEPROM FILE
        LDX     DIRAM
        LDAA    $0,X
        CMPA    #$AA      * PRIMERO DISPONIBLE
        BNE     MSTRA
        CLRA
        STAA    $1,X
MSTRA   TAB
        ASRA
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        TBA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
        LDAA    $1,X
        TAB
        ASRA
        ASRA
        ASRA
        ASRA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        TBA
        ANDA    #$0F
        ORA     #$30
        JSR     ESCLCD
        LDAA    #'/'
        JSR     ESCLCD
*[]------------------------------------[]
*   LEEBID($00,$00,$00,$00,$00,$00,$00)
*[]------------------------------------[]
        CLRA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        PSHA
        JSR     LEEBID    * CONSULTA EL A#O ACTIVO EN EL RTC
        PSHX
        TSX
        LDAB    $5,X      * CARGA EL A#O
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE A#O
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE A#O
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULX
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        PULA
        JSR     INFECHA   * INCLUYE UNA FECHA NUEVA
        CMPA    #$AA      * SE MODIFICO EL REGISTRO ?
        BNE     ULTD
        LDAA    $0,X      * CARGA EL CONTENIDO DEL REGISTRO
        CMPA    #$AA      * ES EL PRIMERO DISPONIBLE ?
        BEQ     ULTF
ULTD    LDAA    $0,X      * CARGA EL VALOR DEL DIA
        CMPA    #$AA      * ES EL NUEVO PRIMERO DISPONIBLE ?
        BNE     SIGUEL
        CLRA              * LIMPIA EL CAMPO DEL MES
        STAA    $1,X
        JSR     WRITE_FRD
        BRA     ULTF
SIGUEL  LDX     DIRFILE
        INX               * PASA AL SIGUIENTE CAMPO
        INX
        STX     DIRFILE
        CPX     #$07FE    * DIRECCION DE ULTIMO ELEMENTO DE LA TABLA ?
        BHS     ULTF
        JMP     FERIAD
ULTF    RTS



*[]------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE ACTIVAR EL INDICADOR DE DELAY PARA
*  UN DISPOSITIVO INDICADO
*
*  ENTRADA: PARAMETRO 1 -> NUMERO DEL DISPOSITIVO
*           PARAMETRO 2 -> NUEVO VALOR PARA EL INDICADOR
*                          (INDICADOR DE DELAY: 0 NO HAY DELAY
*                                               1    HAY DELAY)
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE, WRITE_FILE
*
*  < NOTA: EL CONTENIDO DE ACCB ES DESTRUIDO >
*
*[]------------------------------------------------------------[]
WRITE_DEF
        PSHX
        TSX
        LDAA    $5,X      * CARGA EL NUMERO DEL DISPOSITIVO
        JSR     READ_EST  * LEE EL ESTADO DEL DISPOSITIVO
        LDAB    $4,X      * CARGA EL NUEVO VALOR PARA INDICADOR
        ANDB    #1
        ASLB              * COLOCA EN D1 EL INDICADOR DE DELAY
        ABA               * INDICADOR DELAY + ESTADO DEL DISP.
        PSHA              * PARAMETRO 1 > NUEVO VALOR DEL CAMPO
        LDAB    $5,X      * CARGA EL NUMERO DEL DISPOSITIVO
        LDX     #SARRAY   * APUNTA AL INICIO DE LA TABLA DE DISPOSITIVOS
        DECB
        ABX               * APUNTA AL CAMPO DEL DISPOSITIVO INDICADO
        PSHX              * PARAMETRO 2 > DIRECCION EFECTIVA
        JSR    WRITE_FILE * ESCRIBE EL CAMPO PARA ESE DISPOSITIVO
        PULX
        PULA
        PULX
        RTS



*[]-------------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE REGRESA EL INDICADOR DE DELAY PARA EL DISPOSITIVO
*
*  ENTRADA: ACCA -> NUMERO DEL DISPOSITIVO INDICADO
*  SALIDA:  ACCA -> INDICADOR DE DELAY: 0 NO HAY DELAY
*                                       1    HAY DELAY
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE
*
*[]------------------------------------------------------------------[]
READ_DEF
        PSHX
        PSHB
        TAB
        LDX     #SARRAY   * APUNTA AL INICIO DE LA TABLA DE DISPOSITIVOS
        DECB
        ABX               * APUNTA AL CAMPO DEL DISPOSITIVO INDICADO
        PSHX
        JSR     READ_FILE * LEE EL CAMPO PARA ESE DISPOSITIVO
        PULX
        ASRA              * COLOCA EN D0 EL INDICADOR DE DELAY
        ANDA    #1        * ENMASCARA EL INDICADOR DE DELAY
        PULB
        PULX
        RTS



*[]---------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE REGRESA EL NUMERO DE DISPOSITIVOS CONTROLADOS
*
*  ENTRADA: NINGUNA
*  SALIDA:  NUMERO DE DISPOSITIVOS CONTROLADOS EN ACCA
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE
*
*[]---------------------------------------------------------------[]
READ_#DCTR
        PSHX
        LDX     #VNDC     * APUNTA AL CAMPO DE NUMERO DE DISPOSITIVOS
        PSHX
        JSR     READ_FILE * LECTURA DE LA EEPROM FILE
        PULX
*[]-------------------------------------------------------[]
*  VERIFICA EL CAMPO DE NUMERO DE DISPOSITIVOS CONTROLADOS
*[]-------------------------------------------------------[]
        CMPA    #24
        BLS     J_01
        LDAA    #1        * INICIA EL CAMPO
        STAA    RECONF    * ACTIVA EL INDICADOR DE RECONFIGURACION
        PSHA              * COLOCA EL PARAMETRO 1
        LDX     #VNDC     * APUNTA AL CAMPO DE NUMERO DE DISPOSITIVOS
        STAA    $0,X      * ACTUALIZA EL CAMPO CON EL NUEVO VALOR
        PSHX              * COLOCA EL PARAMETRO 2
        JSR    WRITE_FILE
        PULX
        PULA
J_01    PULX
        RTS



*[]-------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE MODIFICA EL CAMPO DE NUMERO DE DISPOSITIVOS
*  CONTROLADOS EN LA EEPROM FILE
*
*  ENTRADA: NUEVO VALOR EN ACCA
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> WRITE_FILE
*
*[]-------------------------------------------------------------[]
WRITE_#DCTR
        PSHX
        PSHA              * COLOCA EL PARAMETRO 1
        LDX     #VNDC     * APUNTA AL CAMPO DE NUMERO DE DISPOSITIVOS
        PSHX              * COLOCA EL PARAMETRO 2
        JSR    WRITE_FILE
        PULX
        PULA
        PULX
        RTS



*[]---------------------------------------------------------------[]
*
*  PROCEDIMIENTO PARA EDITAR EL NUMERO DE DISPOSITIVOS CONTROLADOS
*  POR EL SISTEMA EN UN MOMENTO DADO DE SU OPERACION
*
*  ENTRADA: INDICE X APUNTANDO AL CAMPO DE NUMERO DE DISP.
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, BINBCD, ESCLCD, TECL_IN,
*                              WRITE_#DCTR
*
*
*  DETALLE PROCEDIMENTAL:
*
*   WHILE tecl_in = t_prog OR tecl_in = t_modif DO
*   BEGIN
*      IF tecl_in = t_prog
*         IF numero de disp = 1 THEN numero de disp := 24
*         ELSE numero de disp := numero de disp - 1
*      ELSE
*         IF numero de disp = 24 THEN numero de disp := 1
*         ELSE numero de disp := numero de disp + 1
*      .
*      .
*      muestra en pantalla el nuevo valor
*      .
*      .
*   END
*
*[]---------------------------------------------------------------[]
NUMDSP  BRA     ESPDS
DECRDSP LDAA    $0,X      * CARGA EL NUMERO DE DISPOSITIVOS
        CMPA    #1
        BNE     DCDSP_1
        LDAA    #24
        BRA     DISP4
DCDSP_1 DECA
        BRA     DISP4
INCRDSP LDAA    $0,X      * CARGA EL NUMERO DE DISPOSITIVOS
        INCA
        CMPA    #25       * NUMERO MAXIMO DE DISPOSITIVOS -> 24
        BMI     DISP4
        LDAA    #1
DISP4   STAA    $0,X      * ALMACENA EL NUEVO VALOR
*[]---------------------------------[]
*  MUESTRA EL NUMERO DE DISPOSITIVOS
*[]---------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS
        LDAB    $0,X      * CARGA EL VALOR
        TBA
        JSR     BINBCD
        TAB
        RORA              * PREPARA EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        BNE     DSP_1
        LDAA    #' '
        BRA     DSP_11
DSP_1   ORA     #$30      * ASCII DEL VALOR
DSP_11  PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
ESPDS   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_40
        BRA     DECRDSP   * DECREMENTA EL CAMPO DE NUMERO DE DISP.
MDF_40  CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     NODS
        JMP     INCRDSP   * INCREMENTA EL CAMPO DE NUMERO DE DISP.
NODS    RTS



*[]--------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ESCRIBE UN CAMPO DE HORARIO CUALQUIERA
*  HUBICADO EN UNA POSICION EN RAM, HACIA UNA DIRECCION EN
*  LA EEPROM FILE
*
*  ENTRADA: VAR DIRAM   -> DIRECCION BASE EN RAM
*           VAR DIRFILE -> DIRECCION BASE EN EEPROM FILE
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> WRITE_FILE
*
*[]--------------------------------------------------------[]
WRITE_HR
        PSHA
        PSHB
        PSHX
        LDAB    #2
WSG_CMP LDX     DIRAM
        LDAA    $0,X      * CARGA EL VALOR DE LA HORA
        PSHA              * PARAMETRO 1
        LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        PSHX              * PARAMETRO 2
        JSR    WRITE_FILE
        PULX
        PULA
        LDX     DIRAM
        INX               * SIGUIENTE COMPONENTE RAM
        STX     DIRAM
        LDX     DIRFILE
        INX               * SIGUIENTE COMPONENTE EEPROM FILE
        STX     DIRFILE
        DECB
        BNE     WSG_CMP   * ESCRIBE LAS DOS COMPONENTES DEL CAMPO
        LDX     DIRAM
        DEX               * ACTIVA LOS APUNTADORES CON VALOR ORIGINAL
        DEX
        STX     DIRAM
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
        PULX
        PULB
        PULA
        RTS



*[]-------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE LEE UN CAMPO DE HORARIO CUALQUIERA HUBICADO
*  EN UNA DIRECCION DE EEPROM FILE, HACIA UNA POSICION EN RAM
*
*  ENTRADA: VAR DIRAM   -> DIRECCION BASE EN RAM
*           VAR DIRFILE -> DIRECCION BASE EN EEPROM FILE
*  SALIDA:  CAMPO LEIDO A PARTIR DE DIRECCION BASE EN RAM
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]-------------------------------------------------------------[]
READ_HR PSHA
        PSHB
        PSHX
        LDAB    #2
RSG_CMP LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        PSHX              * PARAMETRO 1
        JSR     READ_FILE
        PULX
        LDX     DIRAM
        STAA    $0,X      * ALMACENA LA COMPONENTE LEIDA
        INX               * SIGUIENTE COMPONENTE RAM
        STX     DIRAM
        LDX     DIRFILE
        INX               * SIGUIENTE COMPONENTE EEPROM FILE
        STX     DIRFILE
        DECB
        BNE     RSG_CMP   * LEE LAS DOS COMPONENTES DEL CAMPO
        LDX     DIRAM
        DEX               * ACTIVA LOS APUNTADORES CON VALOR ORIGINAL
        DEX
        STX     DIRAM
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
*[]----------------------------------------------[]
*
*  VALIDA EL CAMPO DE HORARIO LEIDO:
*
*
*   IF diram.hora > 24 THEN
*   BEGIN
*      diram.hora := 1
*      activa el indicador de reconfiguracion
*   END
*   ELSE
*      IF diram.minutos > 59 THEN
*      BEGIN
*         diram.minutos := 0
*         activa el indicador de reconfiguracion
*      END
*   IF indicador de reconfiguracion activado THEN
*      escribe el nuevo valor en la eeprom file
*
*[]----------------------------------------------[]
        LDX     DIRAM
        LDAA    $0,X      * CARGA EL VALOR DE LA HORA
        CMPA    #24
        BLS     HRV_1
        LDAA    #1
        STAA    $0,X
        STAA    RECONF    * ACTIVA EL INDICADOR DE RECONFIG.
        CLRA
        STAA    $1,X
        BRA     HRV_2
HRV_1   LDAA    $1,X      * CARGA EL VALOR DE LOS MINUTOS
        CMPA    #59
        BLS     HRV_2
        CLRA
        STAA    $1,X
        LDAA    #1
        STAA    RECONF    * ACTIVA EL INDICADOR DE RECONFIG.
HRV_2   LDAA    RECONF
        BEQ     HRV_3
        LDAB    #2
HRV_4   LDX     DIRAM
        LDAA    $0,X
        PSHA              * PARAMETRO 1
        LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        PSHX              * PARAMETRO 2
        JSR    WRITE_FILE
        PULX
        PULA
        LDX     DIRAM
        INX               * SIGUIENTE COMPONENTE RAM
        STX     DIRAM
        LDX     DIRFILE
        INX               * SIGUIENTE COMPONENTE EEPROM FILE
        STX     DIRFILE
        DECB
        BNE     HRV_4     * ESCRIBE LAS DOS COMPONENTES DEL CAMPO
        LDX     DIRAM
        DEX               * ACTIVA LOS APUNTADORES CON VALOR ORIGINAL
        DEX
        STX     DIRAM
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
HRV_3   PULX
        PULB
        PULA
        RTS



*[]-----------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PERMITE MODIFICAR E INCLUIR DIAS FERIADOS
*  EN EL SISTEMA
*
*  ENTRADA: APUNTADOR AL REGISTRO DE FECHA ( IX )
*  SALIDA:  INDICADOR DE MODIFICACION EN ACCA -> AAH
*                                             -> 00H
*
*  PROCEDIMIENTOS EMPLEADOS -> INST4B, WRITE_FRD, TECL_IN
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]-----------------------------------------------------------[]
INFECHA CLRA
        STAA    INDMD     * INDICADOR DE MODIFICACION
        LDAA    #$C0      * CAMBIA A LA SEGUNDA LINEA
        JSR     INST4B
        LDAA    #$14
        JSR     INST4B
        JMP     DSDIA     * COMPRUEBA LAS TECLAS OPRIMIDAS


*[]--------------------------------------------------------------[]
*
*               SECCION PARA EL CAMBIO DEL DIA
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF reg.dia.unidad = 0 AND reg.dia.decena = 0 THEN
*         BEGIN
*            reg.dia.unidad := 1
*            reg.dia.decena := 3
*         END
*         ELSE
*            IF reg.dia.unidad = 0 THEN
*            BEGIN
*               reg.dia.unidad := 9
*               reg.dia.decena := reg.dia.decena - 1
*            END
*            ELSE reg.dia.unidad := reg.dia.unidad - 1
*      END
*      ELSE
*         IF reg.dia.unidad = 9 THEN
*         BEGIN
*            reg.dia.decena := reg.dia.decena + 1
*            reg.dia.unidad := 0
*         END
*         ELSE
*            IF reg.dia.unidad = 1 AND reg.dia.decena = 3 THEN
*            BEGIN
*               reg.dia.unidad := 0
*               reg.dia.decena := 0
*            END
*            ELSE reg.dia.unidad := reg.dia.unidad + 1
*      .
*      .
*      { muestra el nuevo valor del dia }
*      .
*      .
*      { coloca en 1 el indicador de modificacion }
*   END
*
*[]--------------------------------------------------------------[]
DECRD2  LDAA    $0,X      * CARGA EL VALOR DEL DIA
        CMPA    #$AA      * ES EL ELEMENTO PRIMERO DISPONIBLE ?
        BNE     MOD_2
        LDAA    #$AA
        STAA    $0,X      * MARCA EL NUEVO ELEMENTO DISPONIBLE
        CLRA
        STAA    $1,X
        PSHX
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
        PULX
        JSR     WRITE_FRD * ESCRIBE EL NUEVO DISPONIBLE EN EEPROM FILE
        PSHX
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
        PULX
        CLRA              * ACTIVA CON CEROS EL CAMPO ACTUAL
        STAA    $0,X
        STAA    $1,X
MOD_2   LDAA    $0,X      * CARGA EL VALOR DEL DIA
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #0        * REG.DIA.UNIDAD
        BNE     DCD2_1
        CMPA    #0        * REG.DIA.DECENA
        BNE     DCD2_1
        LDAB    #1        * REG.DIA.UNIDAD
        LDAA    #$30      * REG.DIA.DECENA
        BRA     DIA12
DCD2_1  CMPB    #0        * REG.DIA.UNIDAD
        BNE     DCD2_2
        LDAB    #9        * REG.DIA.UNIDAD
        SUBA    #$10      * REG.DIA.DECENA
        BRA     DIA12
DCD2_2  DECB              * REG.DIA.UNIDAD
        BRA     DIA12
INCRD2  LDAA    $0,X      * CARGA EL VALOR DEL DIA
        CMPA    #$AA      * ES EL ELEMENTO PRIMERO DISPONIBLE ?
        BNE     MOD_1
        LDAA    #$AA
        STAA    $0,X      * MARCA EL NUEVO ELEMENTO DISPONIBLE
        CLRA
        STAA    $1,X
        PSHX
        LDX     DIRFILE
        INX
        INX
        STX     DIRFILE
        PULX
        JSR     WRITE_FRD * ESCRIBE EL NUEVO DISPONIBLE EN EEPROM FILE
        PSHX
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
        PULX
        CLRA              * ACTIVA CON CEROS EL CAMPO ACTUAL
        STAA    $0,X
        STAA    $1,X
MOD_1   TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     DIA11
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        ADDA    #$10
        BRA     DIA12
DIA11   CMPB    #$01
        BNE     DIA13
        CMPA    #$30
        BNE     DIA13
        CLRA              * ANULA EL DIA FERIADO
        BRA     DIA14
DIA13   INCB
DIA12   ABA
DIA14   STAA    $0,X      * ALMACENA EL NUEVO VALOR DE LOS DIAS
*[]--------------------------------------------[]
*  MUESTRA EL NUEVO VALOR DE LOS DIAS EN EL LCD
*[]--------------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DE DIA
        LDAB    $0,X      * CARGA LOS DIAS
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DE DIA
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DE DIA
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DE DIA
        LDAA    #$01      * ENCIENDE EL INDICADOR DE MODIFICACION
        STAA    INDMD
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
DSDIA   JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_20
        JMP     DECRD2    * DECREMENTA EL CAMPO DEL DIA
MDF_20  CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     CHM
        JMP     INCRD2    * INCREMENTA EL CAMPO DEL DIA


*[]-------------------------------------------------------------[]
*  PUNTO DE DESICION PARA CONTINUAR O RETORNAR CON VALOR ( AAH )
*[]-------------------------------------------------------------[]
CHM     LDAA    INDMD     * CARGA EL INDICADOR
        CMPA    #$00      * HUBO MODIFICACION DEL CAMPO ?
        BNE     MMES
        LDAA    #$AA      * VALOR DE FINALIZACION ( AAH )
        JMP     TERMIN


*[]-------------------------------------------------------------[]
*  COMPRUEBA SI EL VALOR DEL DIA INTRODUCIDO ES CERO O DIFERENTE
*[]-------------------------------------------------------------[]
MMES    LDAA    $0,X      * CARGA EL VALOR DEL DIA
        CMPA    #$00
        BNE     AVAN      * CONTINUA AL SIGUIENTE CAMPO
        JMP     TERMIN    * ACCA REGRESA CON VALOR 0
AVAN    LDAA    #$03
UNIM    PSHA
        LDAA    #$14      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL MES
        PULA
        DECA
        BNE     UNIM
        JMP     DSMS


*[]--------------------------------------------------------------[]
*
*                SECCION PARA EL CAMBIO DEL MES
*
*
*   WHILE tecl_in = t_modif AND tecl_in = t_prog DO
*   BEGIN
*      IF tecl_in = t_prog THEN
*      BEGIN
*         IF reg.mes.unidad = 1 AND reg.mes.decena = 0 THEN
*         BEGIN
*            reg.mes.unidad := 2
*            reg.mes.decena := 1
*         END
*         ELSE
*            IF reg.mes.unidad = 0 THEN
*            BEGIN
*               reg.mes.unidad := 9
*               reg.mes.decena := reg.mes.decena - 1
*            END
*            ELSE reg.mes.unidad := reg.mes.unidad - 1
*      END
*      ELSE
*         IF reg.mes.unidad = 9 THEN
*         BEGIN
*            reg.mes.decena := reg.mes.decena + 1
*            reg.mes.unidad := 0
*         END
*         ELSE
*            IF reg.mes.unidad = 2 AND reg.mes.decena = 1 THEN
*            BEGIN
*               reg.mes.unidad := 1
*               reg.mes.decena := 0
*            END
*            ELSE reg.mes.unidad := reg.mes.unidad + 1
*      .
*      .
*      { muestra el nuevo valor del mes }
*      .
*      .
*   END
*
*[]--------------------------------------------------------------[]
DECRMS2 LDAA    $1,X      * CARGA EL VALOR DEL MES
        TAB
        ANDA    #$F0      * SEPARA LOS DIGITOS DE UNIDAD Y DECENA
        ANDB    #$0F
        CMPB    #1        * REG.MES.UNIDAD
        BNE     DCMS2_1
        CMPA    #0        * REG.MES.DECENA
        BNE     DCMS2_1
        LDAB    #2        * REG.MES.UNIDAD
        LDAA    #$10      * REG.MES.DECENA
        BRA     MES12
DCMS2_1 CMPB    #0        * REG.MES.UNIDAD
        BNE     DCMS2_2
        LDAB    #9        * REG.MES.UNIDAD
        SUBA    #$10      * REG.MES.DECENA
        BRA     MES12
DCMS2_2 DECB              * REG.MES.UNIDAD
        BRA     MES12
INCRMS2 LDAA    $1,X      * CARGA EL VALOR DEL MES
        TAB
        ANDA    #$F0
        ANDB    #$0F
        CMPB    #$09      * ES EL DIGITO DE UNIDADES 9 ?
        BNE     MES11
        CLRB              * LIMPIA LAS UNIDADES E INCREMENTA DECENAS
        ADDA    #$10
        BRA     MES12
MES11   CMPB    #$02
        BNE     MES13
        CMPA    #$10
        BNE     MES13
        LDAA    #$01
        BRA     MES14
MES13   INCB
MES12   ABA
MES14   STAA    $1,X      * ALMACENA EL NUEVO VALOR DEL MES
*[]----------------------------------------[]
*  MUESTRA EL NUEVO VALOR DEL MES EN EL LCD
*[]----------------------------------------[]
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * DECENAS DEL MES
        LDAB    $1,X      * CARGA EL MES
        TBA
        RORA              * PREPARA EL DIGITO DE LAS DECENAS DEL MES
        RORA
        RORA
        RORA
        ANDA    #$0F
        ORA     #$30      * ASCII DEL VALOR
        PSHB
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        PULB
        TBA
        ANDA    #$0F      * PREPARA EL DIGITO DE UNIDADES DEL MES
        ORA     #$30      * ASCII DEL VALOR
        JSR     ESCLCD    * LO MUESTRA EN EL LCD
        LDAA    #$10      * COLOCA EL CURSOR EN LA POSICION DE LAS
        JSR     INST4B    * UNIDADES DEL MES
*[]------------------[]
*  ESPERA NUEVA ORDEN
*[]------------------[]
DSMS    JSR     TECL_IN   * LEE DEL DISPOSITIVO TECLADO
        CMPB    #T_PROG   * TECLA "PROG" OPRIMIDA ?
        BNE     MDF_21
        JMP     DECRMS2   * DECREMENTA EL CAMPO DEL MES
MDF_21  CLRA
        CMPB    #T_MODIF  * TECLA "MODIF" OPRIMIDA ?
        BNE     TERMIN
        JMP     INCRMS2   * INCREMENTA EL CAMPO DEL MES
TERMIN  LDAB    $0,X      * CARGA EL VALOR DEL DIA
        CMPB    #$00      * FUE MARCADO COMO NULO ?
        BNE     FRA
        LDAB    #$AA      * INDICA PRIMERO DISPONIBLE
        STAB    $0,X
        CLRB
        STAB    $1,X
FRA     JSR     WRITE_FRD * ESCRIBE LOS CAMBIOS EN LA EEPROM FILE
        RTS



*[]------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ESCRIBE UN CAMPO DE DIA FERIADO CUALQUIERA
*  HUBICADO EN LA POSICION DE RAM 94H ( TABLA ), HACIA
*  UNA DIRECCION EN LA EEPROM FILE
*
*  ENTRADA: VAR DIRFILE -> DIRECCION BASE EN EEPROM FILE
*           CAMPO DE FECHA A PARTIR DE "TABLA"
*  SALIDA:  NINGUNA
*
*  PROCEDIMIENTOS EMPLEADOS -> WRITE_FILE
*
*[]------------------------------------------------------------[]
WRITE_FRD
        PSHA
        PSHB
        PSHX
        LDX     #TABLA    * DIRECCION DE LA VARIABLE TABLA
        STX     DIRAM
        LDAB    #2
W_FER   LDX     DIRAM
        LDAA    $0,X      * CARGA EL VALOR DE LA COMPONENTE
        PSHA              * PARAMETRO 1
        LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        PSHX              * PARAMETRO 2
        JSR     WRITE_FILE
        PULX
        PULA
        LDX     DIRAM
        INX               * SIGUIENTE COMPONENTE RAM
        STX     DIRAM
        LDX     DIRFILE
        INX               * SIGUIENTE COMPONENTE EEPROM FILE
        STX     DIRFILE
        DECB
        BNE     W_FER     * ESCRIBE LAS DOS COMPONENTES DEL CAMPO
        LDX     DIRAM
        DEX               * ACTIVA LOS APUNTADORES CON VALOR ORIGINAL
        DEX
        STX     DIRAM
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
        PULX
        PULB
        PULA
        RTS



*[]-----------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE LEE UN CAMPO DE DIA FERIADO CUALQUIERA HUBICADO
*  EN UNA DIRECCION DE EEPROM FILE, HACIA LA POSICION 94H ( TABLA )
*  EN RAM
*
*  ENTRADA: VAR DIRFILE -> DIRECCION BASE EN EEPROM FILE
*  SALIDA:  CAMPO LEIDO A PARTIR DE DIRECCION 94H ( TABLA )
*
*  PROCEDIMIENTOS EMPLEADOS -> READ_FILE
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]-----------------------------------------------------------------[]
READ_FRD
        PSHA
        PSHB
        PSHX
        LDX     #TABLA    * DIRECCION DE LA VARIABLE TABLA
        STX     DIRAM
        LDAB    #2
R_FER   LDX     DIRFILE   * CARGA DIRECCION BASE DENTRO DE LA EEPROM FILE
        PSHX              * PARAMETRO 1
        JSR     READ_FILE
        PULX
        LDX     DIRAM
        STAA    $0,X      * ALMACENA LA COMPONENTE LEIDA
        LDX     DIRAM
        INX               * SIGUIENTE COMPONENTE RAM
        STX     DIRAM
        LDX     DIRFILE
        INX               * SIGUIENTE COMPONENTE EEPROM FILE
        STX     DIRFILE
        DECB
        BNE     R_FER     * LEE LAS DOS COMPONENTES DEL CAMPO
        LDX     DIRAM
        DEX               * ACTIVA LOS APUNTADORES CON VALOR ORIGINAL
        DEX
        STX     DIRAM
        LDX     DIRFILE
        DEX
        DEX
        STX     DIRFILE
*[]-------------------------------------------------[]
*
*  VALIDA EL CAMPO DE DIA:
*
*
*   IF valor del dia <> $AA THEN
*   BEGIN
*      separa los digitos del campo dia
*      IF digito de decenas > 3 THEN
*      BEGIN
*         digito de decenas := 0
*         activa el indicador de reconfiguracion
*      END
*      IF digito de unidades > 9 THEN
*      BEGIN
*         digito de unidades := 1
*         activa el indicador de reconfiguracion
*      END
*      une ambos digitos en un solo valor del dia
*      IF valor del dia > $31 THEN
*      BEGIN
*         digito de unidades := 1
*         digito de decenas := 0
*         une ambos digitos en un solo valor del dia
*         activa el indicador de reconfiguracion
*      END
*      IF indicador de reconfiguracion activado THEN
*         escribe el nuevo valor en la eeprom file
*      actualiza TABLA con el nuevo valor del dia
*   END
*   ELSE termina el procedimiento
*
*[]-------------------------------------------------[]
        LDX     DIRAM
        LDAA    $0,X      * CARGA EL VALOR DEL DIA
        CMPA    #$AA      * FILTRA LA MARCA DE PRIMERO DISPONIBLE
        BNE     NMRC      * NO ES MARCA DE PRIMERO DISPONIBLE
        JMP     FRV_8
NMRC    TAB
        ANDB    #$0F      * DIGITO DE UNIDADES
        ASRA              * ADAPTA EL DIGITO DE DECENAS
        ASRA
        ASRA
        ASRA
        ANDA    #$0F      * DIGITO DE DECENAS
        CMPA    #3        * DIGITO CORRECTO ?
        BLS     FRV_1
        CLRA              * NUEVO DIGITO DE DECENAS
        PSHA
        LDAA    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAA    RECONF
        PULA
FRV_1   CMPB    #9        * DIGITO CORRECTO ?
        BLS     FRV_2
        LDAB    #1        * NUEVO DIGITO DE UNIDADES
        PSHA
        LDAA    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAA    RECONF
        PULA
FRV_2   ASLA              * ADAPTA EL DIGITO DE LAS DECENAS
        ASLA
        ASLA
        ASLA
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$31      * VALOR DEL DIA CORRECTO ?
        BLS     FRV_3
        LDAA    #1        * NUEVO VALOR DEL DIA
        LDAB    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAB    RECONF
FRV_3   LDAB    RECONF    * CARGA EL INDICADOR DE RECONFIG.
        CMPB    #1        * ESTA ACTIVADO ?
        BNE     FRV_4
        PSHA              * PARAMETRO 1
        LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        PSHX              * PARAMETRO 2
        JSR     WRITE_FILE
        PULX
        PULA
        LDX     DIRAM     * APUNTA AL CAMPO DEL DIA EN TABLA
        STAA    $0,X      * ACTUALIZA EL CAMPO DEL DIA EN TABLA
FRV_4   LDX     DIRAM
        INX               * APUNTA AL CAMPO DEL MES EN TABLA
*[]----------------------------------------------[]
*
*  VALIDA EL CAMPO DEL MES:
*
*
*   separa los digitos del campo mes
*   IF digito de decenas > 1 THEN
*   BEGIN
*      digito de decenas := 0
*      activa el indicador de reconfiguracion
*   END
*   IF digito de unidades > 9 THEN
*   BEGIN
*      digito de unidades := 1
*      activa el indicador de reconfiguracion
*   END
*   une ambos digitos en un solo valor del mes
*   IF valor del mes > $12 THEN
*   BEGIN
*      digito de unidades := 1
*      digito de decenas := 0
*      activa el indicador de reconfiguracion
*      une ambos digitos en un solo valor del mes
*   END
*   IF indicador de reconfiguracion activado THEN
*      escribe el nuevo valor en la eeprom file
*   actualiza TABLA con el nuevo valor del mes
*
*[]----------------------------------------------[]
        LDAA    $0,X      * CARGA EL VALOR DEL MES
        TAB
        ANDB    #$0F      * DIGITO DE UNIDADES
        ASRA              * ADAPTA EL DIGITO DE DECENAS
        ASRA
        ASRA
        ASRA
        ANDA    #$0F      * DIGITO DE DECENAS
        CMPA    #1        * DIGITO CORRECTO ?
        BLS     FRV_5
        CLRA              * NUEVO DIGITO DE DECENAS
        PSHA
        LDAA    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAA    RECONF
        PULA
FRV_5   CMPB    #9        * DIGITO CORRECTO ?
        BLS     FRV_6
        LDAB    #1        * NUEVO DIGITO DE UNIDADES
        PSHA
        LDAA    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAA    RECONF
        PULA
FRV_6   ASLA              * ADAPTA EL DIGITO DE LAS DECENAS
        ASLA
        ASLA
        ASLA
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$12      * VALOR DEL MES CORRECTO ?
        BLS     FRV_7
        LDAA    #1        * NUEVO VALOR DEL MES
        LDAB    #1        * ACTIVA EL INDICADOR DE RECONFIG.
        STAB    RECONF
FRV_7   LDAB    RECONF    * CARGA EL INDICADOR DE RECONFIG.
        CMPB    #1        * ESTA ACTIVADO ?
        BNE     FRV_8
        PSHA              * PARAMETRO 1
        LDX     DIRFILE   * CARGA EN X DIRECCION BASE EN EEPROM FILE
        INX               * APUNTA AL CAMPO DEL MES
        PSHX              * PARAMETRO 2
        JSR     WRITE_FILE
        PULX
        PULA
        LDX     DIRAM
        INX               * APUNTA AL CAMPO DEL MES EN TABLA
        STAA    $0,X      * ACTUALIZA EL CAMPO DEL MES EN TABLA
FRV_8   PULX
        PULB
        PULA
        RTS



*[]------------------------------------------------------[]
*
*  PROCEDIMIENTO PARA INICIALIZACION Y ENTRADA DE TECLADO
*
*  ENTRADA: NINGUNA
*  SALIDA:  ESTADO DEL TECLADO EN ACCB
*
*[]------------------------------------------------------[]
TECL_IN PSHA
TC_IN_1 JSR     TCLRET    * EFECTO DE RESORTE PARA TECLADO
        CLRA              * ACTIVA EL PUERTO 1 CON BITS DE ENTRADA
        STAA    $00
        LDAA    #TECLADO  * SELECCIONA EL TECLADO DE LA CONSOLA
        STAA    DIRBUS
        LDAB    DATBUS    * LEE EL TECLADO DE CONSOLA
        LDAA    #NODISP   * NINGUN DISPOSITIVO SELECCIONADO
        STAA    DIRBUS
        ANDB    #TECLAS   * ENMASCARA LOS BITS DE TECLA
        CMPB    #TECLAS   * HAY TECLA OPRIMIDA ?
        BEQ     TC_IN_1   * SIN ACCION ALGUNA
        JSR     TCLRET    * EFECTO DE RESORTE PARA TECLADO
        PULA
        RTS



TCLRET  PSHX
        LDX     #$06FF
TRT_1   PSHX
        LDX     #$001F
TRT_2   DEX
        BNE     TRT_2
        PULX
        DEX
        BNE     TRT_1
        PULX
        RTS



*[]------------------------------------------------[]
*
*  PROCEDIMIENTO QUE LLENA EL BID CON DATOS DEL RTC
*  EN FORMATO "BCD" --> | D10 | D1 |
*
*  ENTRADA: NINGUNA
*  SALIDA:  ESTRUCTURA BID (LOCAL AL CALLER PROC.)
*
*  FORMATO DE BID: DIR(K)   -> minutos    (00)
*                  DIR(K+1) -> AM/PM      ( 0)
*                  DIR(K+2) -> hora       (00)
*                  DIR(K+3) -> ano        (00)
*                  DIR(K+4) -> mes        (00)
*                  DIR(K+5) -> dia mes    (00)
*                  DIR(K+6) -> dia semana ( 0)
*  Los campos que no se modifican, se llenan
*  con el valor "$AA" (en el proc. llamante)
*
*  PROCEDIMIENTOS EMPLEADOS -> LEERTC, ESCRTC
*
*
*    EL DETALLE PROCEDIMENTAL ESTA MEZCLADO
*    CON EL LISTADO FUENTE DEL PROCEDIMIENTO
*
*[]------------------------------------------------[]
LEEBID  PSHX
        TSX
*[]----------[]
*  LEE EL A#O
*[]----------[]
        LDAA    #$0C      * REGISTRO DE LAS DECENAS DE A#O
        PSHA
        JSR     LEERTC
        PULB              * CARGA EL DIGITO DE DECENAS
        CMPB    #$09      * DIGITO DE DECENAS CORRECTO ?
        BLS     AV_1
        CLRA              * INICIA EL DIGITO DE LAS DECENAS
        PSHA
        LDAA    #$0C      * REGISTRO DE LAS DECENAS DE A#O
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRB
AV_1    ASLB              * COLOCA EL DIGITO EN SU POSICION
        ASLB
        ASLB
        ASLB
        LDAA    #$0B      * REGISTRO DE LAS UNIDADES DE A#O
        PSHA
        JSR     LEERTC
        PULA              * CARGA EL DIGITO DE UNIDADES
        CMPA    #$09      * DIGITO DE UNIDADES CORRECTO ?
        BLS     AV_2
        CLRA              * INICIA EL DIGITO DE LAS UNIDADES
        PSHA
        LDAA    #$0B      * REGISTRO DE LAS UNIDADES DE A#O
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
AV_2    ABA               * UNION DE AMBOS DIGITOS
        STAA    $7,X      * ALMACENA EL VALOR EN EL BID
*[]------------------[]
*  LEE EL MES DEL A#O
*[]------------------[]
        LDAA    #$0A      * REGISTRO DE LAS DECENAS DEL MES
        PSHA
        JSR     LEERTC
        PULB              * CARGA EL DIGITO DE DECENAS
        LDAA    #$09      * REGISTRO DE LAS UNIDADES DEL MES
        PSHA
        JSR     LEERTC
        PULA              * CARGA EL DIGITO DE UNIDADES
*[]----------------------------------------------[]
*
*   IF digito de decenas > 1 THEN
*   BEGIN
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*   END
*   IF digito de unidades > 9 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*   END
*   une ambos digitos en un solo valor del mes
*   IF valor del mes > $12 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*      une ambos digitos en un solo valor del mes
*   END
*   actualiza el bid con el nuevo valor del mes
*
*[]----------------------------------------------[]
        CMPB    #1        * DIGITO DE DECENAS CORRECTO ?
        BLS     MV_1
        PSHA              * ALMACENA EL DIGITO DE UNIDADES
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$0A      * REGISTRO DE LAS DECENAS DEL MES
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        PULA              * REPONE EL DIGITO DE UNIDADES
MV_1    CMPA    #9        * DIGITO DE UNIDADES CORRECTO ?
        BLS     MV_2
        LDAA    #1        * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$09      * REGISTRO DE LAS UNIDADES DEL MES
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
MV_2    ASLB              * COLOCA EN SU POSICION EL DIGITO DE DECENAS
        ASLB
        ASLB
        ASLB
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$12      * VALOR DE LA HORA CORRECTO ?
        BLS     MV_3
        LDAA    #1        * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$09      * REGISTRO DE LAS UNIDADES DEL MES
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$0A      * REGISTRO DE LAS DECENAS DEL MES
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        LDAA    #1        * NUEVO VALOR DEL MES
MV_3    STAA    $8,X      * ALMACENA EL VALOR EN EL BID
*[]------------------[]
*  LEE EL DIA DEL MES
*[]------------------[]
        LDAA    #$08      * REGISTRO DE LAS DECENAS DEL DIA
        PSHA
        JSR     LEERTC
        PULB              * CARGA EL DIGITO DE DECENAS
        ANDB    #$03      * ENMASCARA EL "LEAP YEAR SELECTION"
        LDAA    #$07      * REGISTRO DE LAS UNIDADES DEL DIA
        PSHA
        JSR     LEERTC
        PULA              * CARGA EL DIGITO DE UNIDADES
*[]----------------------------------------------[]
*
*   IF digito de decenas > 3 THEN
*   BEGIN
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*   END
*   IF digito de unidades > 9 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*   END
*   une ambos digitos en un solo valor del dia
*   IF valor del mes > $31 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*      une ambos digitos en un solo valor del dia
*   END
*   actualiza el bid con el nuevo valor del dia
*
*[]----------------------------------------------[]
        CMPB    #3        * DIGITO CORRECTO ?
        BLS     DMV_1
        PSHA              * ALMACENA EL DIGITO DE UNIDADES
        CLRB              * NUEVO VALOR DE DECENAS
        PSHB
        LDAA    #$08      * REGISTRO DE LAS DECENAS DEL DIA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        PULA              * REPONE EL DIGITO DE UNIDADES
DMV_1   CMPA    #9        * DIGITO DE UNIDADES CORRECTO ?
        BLS     DMV_2
        LDAA    #1        * NUEVO VALOR DE UNIDADES
        PSHA
        LDAA    #$07      * REGISTRO DE LAS UNIDADES DEL DIA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
DMV_2   ASLB              * COLOCA EN SU POSICION EL DIGITO DE DECENAS
        ASLB
        ASLB
        ASLB
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$31      * VALOR DEL DIA CORRECTO ?
        BLS     DMV_3
        LDAA    #1        * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$07      * REGISTRO DE LAS UNIDADES DEL DIA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$08      * REGISTRO DE LAS DECENAS DEL DIA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        LDAA    #1        * NUEVO VALOR DEL DIA
DMV_3   STAA    $9,X      * ALMACENA EL VALOR EN EL BID
*[]-----------------------[]
*  LEE EL DIA DE LA SEMANA
*[]-----------------------[]
        LDAA    #$06      * REGISTRO DE DIA DE LA SEMANA
        PSHA
        JSR     LEERTC
        PULA
        CMPA    #$06      * VALOR CORRECTO ?
        BLS     DSV_1
*[]---------------------------------------------------[]
*  INICIALIZACION DEL CAMPO DIA DE LA SEMANA EN EL RTC
*[]---------------------------------------------------[]
        LDAA    #1        * INICIA EL DIA DE LA SEMANA
        PSHA
        LDAA    #$06      * REGISTRO DE DIA DE LA SEMANA
        PSHA
        JSR     ESCRTC
        PULA
        PULA
        LDAA    #1        * VALOR DEL DIA DE LA SEMANA
DSV_1   STAA    $0A,X     * ALMACENA EL VALOR EN EL BID
*[]-------------------------[]
*  LEE LA HORA DEL DIA AM/PM
*[]-------------------------[]
        LDAA    #$05      * REGISTRO DE LAS DECENAS DE HORA
        PSHA
        JSR     LEERTC
        PULB              * CARGA EL DIGITO DE DECENAS
        TBA
        ANDA    #$04      * PREPARA EL DATO AM/PM
        RORA
        RORA
        STAA    $5,X      * ALMACENA EL DATO AM/PM
        ANDB    #$03      * ENMASCARA LOS BITS h20 Y h10
        LDAA    #$04      * REGISTRO DE LAS UNIDADES DE HORA
        PSHA
        JSR     LEERTC
        PULA              * CARGA EL DIGITO DE UNIDADES
*[]-------------------------------------------------[]
*
*   IF digito de decenas > 1 THEN
*   BEGIN
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*   END
*   IF digito de unidades > 9 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*   END
*   une ambos digitos en un solo valor de la hora
*   IF valor de la hora > $12 THEN
*   BEGIN
*      digito de unidades := 1
*      escribe el nuevo valor en el rtc
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*      une ambos digitos en un solo valor de la hora
*   END
*   actualiza el bid con el nuevo valor de la hora
*
*[]-------------------------------------------------[]
        CMPB    #1        * DIGITO DE DECENAS CORRECTO ?
        BLS     HV_1
        PSHA              * ALMACENA EL DIGITO DE UNIDADES
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$05      * REGISTRO DE LAS DECENAS DE HORA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        PULA              * REPONE EL DIGITO DE UNIDADES
HV_1    CMPA    #9        * DIGITO DE UNIDADES CORRECTO ?
        BLS     HV_2
        LDAA    #1        * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$04      * REGISTRO DE LAS UNIDADES DE HORA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
HV_2    ASLB              * COLOCA EN SU POSICION EL DIGITO DE DECENAS
        ASLB
        ASLB
        ASLB
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$12      * VALOR DE LA HORA CORRECTO ?
        BLS     HV_3
        LDAA    #1        * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$04      * REGISTRO DE LAS UNIDADES DE HORA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$05      * REGISTRO DE LAS DECENAS DE HORA
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        LDAA    #1        * NUEVO VALOR DE LA HORA
HV_3    STAA    $6,X      * ALMACENA EL VALOR EN EL BID
*[]--------------------------[]
*  LEE LOS MINUTOS DE LA HORA
*[]--------------------------[]
        LDAA    #$03      * REGISTRO DE LAS DECENAS DE MINUTO
        PSHA
        JSR     LEERTC
        PULB              * CARGA EL DIGITO DE DECENAS
        LDAA    #$02      * REGISTRO DE LAS UNIDADES DE MINUTO
        PSHA
        JSR     LEERTC
        PULA              * CARGA EL DIGITO DE UNIDADES
*[]-----------------------------------------------------[]
*
*   IF digito de decenas > 5 THEN
*   BEGIN
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*   END
*   IF digito de unidades > 9 THEN
*   BEGIN
*      digito de unidades := 0
*      escribe el nuevo valor en el rtc
*   END
*   une ambos digitos en un solo valor de los minutos
*   IF valor de los minutos > $59 THEN
*   BEGIN
*      digito de unidades := 0
*      escribe el nuevo valor en el rtc
*      digito de decenas := 0
*      escribe el nuevo valor en el rtc
*      une ambos digitos en un solo valor de los minutos
*   END
*   actualiza el bid con el nuevo valor de los minutos
*
*[]-----------------------------------------------------[]
        CMPB    #5        * DIGITO DE DECENAS CORRECTO ?
        BLS     MTV_1
        PSHA              * ALMACENA EL DIGITO DE UNIDADES
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$03      * REGISTRO DE LAS DECENAS DE MINUTO
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        PULA              * REPONE EL DIGITO DE UNIDADES
MTV_1   CMPA    #9        * DIGITO DE UNIDADES CORRECTO ?
        BLS     MTV_2
        CLRA              * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$02      * REGISTRO DE LAS UNIDADES DE MINUTO
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
MTV_2   ASLB              * COLOCA EN SU POSICION EL DIGITO DE DECENAS
        ASLB
        ASLB
        ASLB
        ABA               * UNE AMBOS DIGITOS
        CMPA    #$59      * VALOR DE LA HORA CORRECTO ?
        BLS     MTV_3
        CLRA              * NUEVO VALOR DE LAS UNIDADES
        PSHA
        LDAA    #$02      * REGISTRO DE LAS UNIDADES DE MINUTO
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRB              * NUEVO VALOR DE LAS DECENAS
        PSHB
        LDAA    #$03      * REGISTRO DE LAS DECENAS DE MINUTO
        PSHA
        JSR     ESCRTC    * ACTUALIZA EL REGISTRO EN EL RTC
        PULA
        PULA
        CLRA              * NUEVO VALOR DE LOS MINUTOS
MTV_3   STAA    $4,X      * ALMACENA EL VALOR EN EL BID
        PULX              * RECUPERA EL CONTENIDO DEL REGISTRO INDICE
        RTS



*[]-----------------------------------------------[]
*
*  PROCEDIMIENTO PARA VACIAR LOS CAMPOS DEL BID EN
*  LOS REGISTROS DEL RTC
*
*  ENTRADA: ESTRUCTURA BID (LOCAL AL CALLER PROC.)
*  SALIDA:  NINGUNA
*
*  FORMATO DE BID: DIR(K)   -> minutos    (00)
*                  DIR(K+1) -> AM/PM      ( 0)
*                  DIR(K+2) -> hora       (00)
*                  DIR(K+3) -> ano        (00)
*                  DIR(K+4) -> mes        (00)
*                  DIR(K+5) -> dia mes    (00)
*                  DIR(K+6) -> dia semana ( 0)
*  Los campos que no se modifican, se llenan
*  con el valor "$AA" (en el proc. llamante)
*
*  PROCEDIMIENTOS EMPLEADOS -> ESCRTC
*
*[]-----------------------------------------------[]
ESCBID  PSHX
        TSX
*[]--------------[]
*  ESCRIBE EL A#O
*[]--------------[]
        LDAA    $7,X      * CARGA EL NUMERO DEL A#O
        CMPA    #$AA      * SE MODIFICA EL REGISTRO ?
        BEQ     RMES
        RORA              * OBTIENE EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        PSHA
        LDAA    #$0C      * REGISTRO DE LAS DECENAS DE A#O
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO A PARAMETROS
        PULA
        LDAA    $7,X      * CARGA EL NUMERO DE A#O
        ANDA    #$0F      * OBTIENE EL DIGITO DE LAS UNIDADES
        PSHA
        LDAA    #$0B      * REGISTRO DE LAS UNIDADES DE A#O
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO A PARAMETROS
        PULA
*[]--------------[]
*  ESCRIBE EL MES
*[]--------------[]
RMES    LDAA    $8,X      * CARGA EL NUMERO DEL MES
        CMPA    #$AA      * SE MODIFICA EL REGISTRO ?
        BEQ     RDIAM
        RORA              * OBTIENE EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        PSHA
        LDAA    #$0A      * REGISTRO DE DECENAS DE MES
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
        LDAA    $8,X      * CARGA EL NUMERO DEL MES
        ANDA    #$0F      * OBTIENE EL DIGITO DE LAS UNIDADES
        PSHA
        LDAA    #$09      * REGISTRO DE LAS UNIDADES DEL MES
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
*[]----------------------[]
*  ESCRIBE EL DIA DEL MES
*[]----------------------[]
RDIAM   LDAA    $9,X      * CARGA EL DIA DEL MES
        CMPA    #$AA      * SE CAMBIARA EL REGISTRO ?
        BEQ     RDIA
        RORA              * OBTIENE EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        PSHA
        LDAA    #$08      * REGISTRO DE LAS DECENAS DEL DIA
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
        LDAA    $9,X      * CARGA EL DIA DEL MES
        ANDA    #$0F      * OBTIENE EL DIGITO DE LAS UNIDADES
        PSHA
        LDAA    #$07      * REGISTRO DE LAS UNIDADES DEL DIA
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
*[]---------------------------[]
*  ESCRIBE EL DIA DE LA SEMANA
*[]---------------------------[]
RDIA    LDAA    $0A,X     * CARGA EL DIA DE LA SEMANA
        CMPA    #$AA      * SE CAMBIARA EL REGISTRO ?
        BEQ     RHORA
        PSHA
        LDAA    #$06      * REGISTRO DE DIA DE LA SEMANA
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
*[]-----------------------------[]
*  ESCRIBE LA HORA DEL DIA AM/PM
*[]-----------------------------[]
RHORA   LDAA    $6,X      * CARGA LA HORA DEL DIA
        CMPA    #$AA      * SE CAMBIARA EL REGISTRO ?
        BEQ     RMIN
        RORA              * OBTIENE EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        LDAB    $5,X      * CARGA EL DATO AM/PM
        CMPB    #$01
        BNE     CERO
        ORA     #$04      * ACTIVA EL BIT EN 1 (PM)
CERO    PSHA
        LDAA    #$05      * REGISTRO DE LAS DECENAS DE HORA
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
        LDAA    $6,X      * CARGA LA HORA DEL DIA
        ANDA    #$0F      * OBTIENE EL DIGITO DE LAS UNIDADES
        PSHA
        LDAA    #$04      * REGISTRO DE LAS UNIDADES DE HORA
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
*[]-------------------[]
*  ESCRIBE LOS MINUTOS
*[]-------------------[]
RMIN    LDAA    $4,X      * CARGA LOS MINUTOS
        CMPA    #$AA      * SE CAMBIARA ESTE REGISTRO ?
        BEQ     FINAL
        RORA              * OBTIENE EL DIGITO DE LAS DECENAS
        RORA
        RORA
        RORA
        ANDA    #$0F
        PSHA
        LDAA    #$03      * REGISTRO DE LAS DECENAS DE MINUTO
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
        LDAA    $4,X      * CARGA LOS MINUTOS
        ANDA    #$0F      * OBTIENE LOS DIGITOS DE LAS UNIDADES
        PSHA
        LDAA    #$2       * REGISTRO DE LAS UNIDADES DE MINUTO
        PSHA
        JSR     ESCRTC
        PULA              * LIBERA EL ESPACIO RESERVADO
        PULA
FINAL   PULX              * RECUPERA EL CONTENIDO DEL REGISTRO INDICE
        RTS



*[]---------------------------------------------------[]
*
*  FUNCION QUE DEVUELVE EL BINARIO NATURAL DE UN VALOR
*  ORIGINALMENTE EN BCD
*
*  ENTRADA: VALOR BCD EN ACCA
*  SALIDA:  VALOR BINARIO NATURAL EN ACCA
*
*[]---------------------------------------------------[]
BCDBIN  PSHB
        PSHA
        TAB
*[]--------------------------------[]
*   ACCB := ( ACCB SHR 4 ) * 10
*[]--------------------------------[]
        RORB              * PREPARA EL DIGITO DE LAS DECENAS
        RORB
        RORB
        RORB
        ANDB    #$0F
        LDAA    #10       * MULTIPLICA EL VALOR EN ACCB POR DIEZ
        MUL
        PULA              * RECUPERA EL VALOR ORIGINAL EN BCD
        ANDA    #$0F      * PREPARA EL DIGITO DE LAS UNIDADES
*[]--------------------[]
*   ACCA := ACCA + ACCB
*[]--------------------[]
        ABA               * REGRESA EL VALOR EN EL ACCA
        PULB
        RTS



*[]---------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE REGRESA LA REPRESENTACION BCD DEL VALOR
*  BINARIO DADO
*
*  ENTRADA: VALOR BINARIO NATURAL EN ACCA
*  SALIDA:  VALOR BCD EN ACCA
*
*
*  DETALLE PROCEDIMENTAL:
*
*   COCNT := 0
*   DVSOR := 10
*   WHILE ACCA >= DVSOR DO
*   BEGIN
*      ACCA := ACCA - DVSOR
*      COCNT := COCNT + 1
*   END
*   ACCA := ( COCNT SHL 4 ) + ACCA
*
*[]---------------------------------------------------------[]
BINBCD  PSHB
        PSHA
        CLRA
        STAA    COCNT
        LDAA    #10
        STAA    DVSOR
        PULA
        BRA     ENDIV
*[]-------------------------------------------[]
*  ACCION DE DIVISION ENTERA
*  ( MC68701 NO POSEE INTRUCCION DE DIVISION )
*[]-------------------------------------------[]
SBST    SUBA    DVSOR
        INC     COCNT
ENDIV   CMPA    DVSOR
        BHS     SBST
        LDAB    COCNT
        ASLB
        ASLB
        ASLB
        ASLB
        ABA
        PULB
        RTS



*****************************************************************************
*                                                                           *
*            PROCEDIMIENTOS PARA EL MANEJO DIRECTO DE DISPOSITIVOS          *
*                         ( RTC, LCD, EEPROM FILE )                         *
*                                                                           *
*****************************************************************************



*[]-------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE LEE DATOS DESDE LOS REGISTROS DEL RTC
*
*  ENTRADA: NUMERO DEL REGISTRO EN RTC (EN PARAMETRO)
*  SALIDA:  CONTENIDO DEL REGISTRO EN RTC (EN PARAMETRO)
*
*[]-------------------------------------------------------[]
LEERTC  PSHX
        TSX
        CLRA              * LIMPIA LOS BITS DEL DATA BUS
        STAA    DATBUS
        LDAA    #BUSTOP   * ACTIVA DATA BUS CON BITS DE SALIDA
        STAA    $00
        LDAA    $4,X      * CARGA EL NUMERO DEL REGISTRO RTC
        ASLA
        ASLA
        ASLA
        ASLA
        STAA    DATBUS    * ENVIA EL NUMERO AL DATA BUS
        ORA     #08
        STAA    DATBUS    * ACTIVA ADDRESS WRITE
        LDAA    #RTC      * ACTIVA CS1 Y CS2
        STAA    DIRBUS
        JSR     ESPERA
        LDAA    #NODISP   * DESACTIVA CS1 Y CS2
        STAA    DIRBUS
        ANDA    #$F0      * DESACTIVA ADDRESS WRITE
        STAA    DATBUS
        JSR     ESPERA
        LDAA    #$0F      * ACTIVA EL PUERTO 1 CON D7-D4 DE ENTRADA
        STAA    $00
        LDAA    #RTC      * ACTIVA CS1 Y CS2
        STAA    DIRBUS
        JSR     ESPERA
        LDAA    #$04      * ACTIVA READ
        STAA    DATBUS
        LDAA    DATBUS    * LEE EL CONTENIDO DEL REGISTRO
        PSHA              * SALVA EL VALOR LEIDO DE RTC
        LDAA    #NODISP   * DESACTIVA CS1 Y CS2
        STAA    DIRBUS
        CLRA              * DESACTIVA READ
        STAA    DATBUS
        PULA              * RECUPERA EL VALOR LEIDO DE RTC
        RORA              * COLOCANDO VALOR LEIDO EN D0-D3
        RORA
        RORA
        RORA
        ANDA    #$0F      * DATO LISTO
        STAA    $4,X      * REGRESA EL VALOR LEIDO DESDE EL RTC
        PULX
        RTS



*[]--------------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ESCRIBE DATOS EN LOS REGISTROS DEL RTC
*
*  ENTRADA: PARAMETRO 2 NUMERO DEL REGISTRO EN RTC
*           PARAMETRO 1 VALOR PARA ALMACEMAR EN EL REGISTRO RTC
*  SALIDA:  NINGUNA
*
*[]--------------------------------------------------------------[]
ESCRTC  PSHX
        TSX
        CLRA              * LIMPIA LOS BITS DEL PUERTO 1
        STAA    DATBUS
        LDAA    #BUSTOP   * ACTIVA EL DATA BUS CON BITS DE SALIDA
        STAA    $00
        LDAA    $4,X      * CARGA EN EL ACUMULADOR EL NUMERO DEL REGISTRO
        ASLA              * COLOCANDO EN D4-D7 NUMERO DEL REGISTRO
        ASLA
        ASLA
        ASLA
        STAA    DATBUS    * ENVIA EL NUMERO AL DATA BUS
        ORA     #08
        STAA    DATBUS    * ACTIVA ADDRESS WRITE
        LDAA    #RTC      * ACTIVA CS1 Y CS2
        STAA    DIRBUS
        JSR     ESPERA
        LDAA    #NODISP   * DESACTIVA CS1 Y CS2
        STAA    DIRBUS
        ANDA    #$F0      * DESACTIVA ADDRESS WRITE
        STAA    DATBUS
        JSR     ESPERA
        LDAA    $5,X      * CARGA EN EL ACUMULADOR EL VALOR PARA ALMACENAR
        ASLA              * COLOCA EL VALOR EN LOS BITS D4-D7
        ASLA
        ASLA
        ASLA
        STAA    DATBUS    * ENVIA EL VALOR AL DATA BUS
        ORA     #$02      * ACTIVA WRITE
        STAA    DATBUS    * ADICIONA EL BIT WRITE
        LDAA    #RTC      * ACTIVA CS1 Y CS2
        STAA    DIRBUS
        JSR     ESPERA
        LDAA    #NODISP   * DESACTIVA CS1 Y CS2
        STAA    DIRBUS
        CLRA              * DESACTIVA WRITE
        STAA    DATBUS
        PULX
        RTS



ESPERA  PSHA
        LDAA     #4
ES1     DECA
        BNE     ES1
        PULA
        RTS



*[]---------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ESCRIBE EL DATO CONTENIDO EN ACCA
*  EN EL LCD
*  LA SELECCION DEL LCD SE REALIZA, COLOCANDO CERO EN
*  EL PUERTO DE DIRECCIONES ( PUERTO 2 )
*
*  ENTRADA: DATO PARA ALMACENAR EN LCD ( ACCA )
*  SALIDA:  NINGUNA
*
*[]---------------------------------------------------[]
ESCLCD  PSHB
        PSHA
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * INICIA PORT1 COMO SALIDA
        STAA    $00
        PULA
        TAB               * COPIA EL VALOR DEL ACUMULADOR A EN B
        ANDB    #$F0      * PREPARA EL NIBBLE MAS SIGNIFICATIVO
        ORB     #$02      * SELECCIONA REGISTRO DE DATOS
        STAB    DATBUS    * ENVIA AL LCD
        LDAB    #LCD      * ACTIVA EL LCD EN EL PUERTO DE
        STAB    DIRBUS    * DIRECCIONES
        LDAB    #NODISP   * DESACTIVA EL LCD
        STAB    DIRBUS
        JSR     BUSY
        ASLA              * PREPARA EL NIBBLE MENOS SIGNIFICATIVO
        ASLA
        ASLA
        ASLA
        TAB               * COPIA EL VALOR DEL ACUMULADOR A EN B
        ORB     #$02      * SELECCIONA REGISTRO DE DATOS
        STAB    DATBUS    * ENVIA AL LCD
        LDAB    #LCD      * ACTIVA EL LCD EN EL PUERTO DE
        STAB    DIRBUS    * DIRECCIONES
        LDAB    #NODISP   * DESACTIVA EL LCD
        STAB    DIRBUS
        JSR     BUSY
        PULB
        RTS



*[]----------------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ESCRIBE LA INSTRUCCION CONTENIDA EN ACCA
*  EN EL LCD
*  LA SELECCION DEL LCD SE REALIZA, COLOCANDO CERO EN
*  EL PUERTO DE DIRECCIONES ( PUERTO 2 )
*
*  ENTRADA: INSTRUCCION AL LCD EN ACCA
*  SALIDA:  NINGUNA
*
*[]----------------------------------------------------------[]
INST4B  PSHB
        PSHA
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * ACTIVA EL PUERTO 1 CON BITS DE SALIDA
        STAA    $00
        PULA
        TAB
        ANDA    #$F0
        STAA    DATBUS    * ENVIA AL RTC LA PALABRA DE INSTRUCCION
        LDAA    #LCD      * ACTIVA EL LCD EN EL PUERTO DE
        STAA    DIRBUS    * DIRECCIONES
        LDAA    #NODISP   * DESACTIVA EL LCD
        STAA    DIRBUS
        TBA
        PULB
INSTLCD PSHA
        CLRA
        STAA    DATBUS
        LDAA    #BUSTOP   * ACTIVA EL PUERTO 1 CON BITS DE SALIDA
        STAA    $00
        PULA
        ASLA              * AJUSTA EL VALOR EN EL NIBBLE
        ASLA              * MAS SIGNIFICATIVO
        ASLA
        ASLA
        STAA    DATBUS    * ENVIA AL RTC LA PALABRA DE INSTRUCCION
        LDAA    #LCD      * ACTIVA EL LCD EN EL PUERTO DE
        STAA    DIRBUS    * DIRECCIONES
        LDAA    #NODISP   * DESACTIVA EL LCD
        STAA    DIRBUS
        JSR     BUSY
        RTS



BUSY    PSHX
        LDX     #$0180
WA1     DEX
        CPX     #$00
        BNE     WA1
        PULX
        RTS



*[]-----------------------------------------------------[]
*
*  PROCEDIMIENTO PARA ESCRIBIR UN DATO EN LA EEPROM FILE
*
*  ENTRADA: PARAMETRO 1 -> DATO PARA ESCRIBIR
*           PARAMETRO 2 -> DIRECCION BITS 0-7
*           PARAMETRO 3 -> DIRECCION BITS 8-10
*  SALIDA:  NINGUNA
*
*[]-----------------------------------------------------[]
WRITE_FILE
        PSHX
        TSX
        LDAA    #NODISP   * SCL EN 0 Y SDT EN 0
        STAA    DIRBUS
        JSR     STARTC    * PRODUCE LA CONDICION DE INICIO DE OPERACION
        LDAA    $4,X      * CARGA LOS BITS 8-10 DE LA DIRECCION ( E.F. )
        ASLA
        ORA     #$A0      * ADICIONA EL CONTROL CODE Y EL BIT R/W = 0
        JSR     PUTBYTE   * ENVIA EL CONTROL BYTE
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        LDAA    $5,X      * CARGA LOS BITS 0-7 DE LA DIRECCION ( E.F. )
        JSR     PUTBYTE   * ENVIA EL WORD ADDRESS
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        LDAA    $6,X      * CARGA EL DATO PARA ESCRIBIR
        JSR     PUTBYTE   * ENVIA DATA
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        JSR     STOPC     * PRODUCE LA CONDICION DE FINAL DE OPERACION
        LDX     #$04FF    * ESPERA POR INTERNAL WRITE CICLE
ERS_C   DEX
        BNE     ERS_C
        PULX
        RTS



*[]-------------------------------------------------[]
*
*  PROCEDIMIENTO PARA LEER UN DATO DE LA EEPROM FILE
*
*  ENTRADA: PARAMETRO 1 -> DIRECCION BITS 0-7
*           PARAMETRO 2 -> DIRECCION BITS 8-10
*  SALIDA:  DATO LEIDO EN ACCA
*
*[]-------------------------------------------------[]
READ_FILE
        PSHX
        TSX
        LDAA    #NODISP   * SCL EN 0 Y SDT EN 0
        STAA    DIRBUS
        JSR     STARTC    * PRODUCE LA CONDICION DE INICIO DE OPERACION
        LDAA    $4,X      * CARGA LA LOS BITS 8-10 DE LA DIRECCION ( E.F. )
        ASLA
        ORA     #$A0      * ADICIONA EL CONTROL CODE Y EL BIT R/W = 0
        JSR     PUTBYTE   * ENVIA EL CONTROL BYTE
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        LDAA    $5,X      * CARGA LOS BITS 0-7 DE LA DIRECCION ( E.F. )
        JSR     PUTBYTE   * ENVIA EL WORD ADDRESS
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        JSR     STARTC    * PRODUCE LA CONDICION DE INICIO DE OPERACION
        LDAA    $4,X      * CARGA LA LOS BITS 8-10 DE LA DIRECCION ( E.F. )
        ASLA
        ORA     #$A1      * ADICIONA EL CONTROL CODE Y EL BIT R/W = 1
        JSR     PUTBYTE
        JSR     GETBIT    * LEE EL RECONOCIMIENTO DE LA EEPROM FILE
        JSR     GETBYTE   * RECIBE EL DATO DE LA EEPROM FILE
        PSHA
        LDAA    #$01      * GENERA EL BIT DE RECONOCIMIENTO = 1
        JSR     PUTBIT
        JSR     STOPC     * PRODUCE LA CONDICION DE FINAL DE OPERACION
        PULA              * REGRESA EL DATO LEIDO EN ACCA
        PULX
        RTS



*[]--------------------------------------------------[]
*
*  PROCEDIMIENTO QUE RECIBE UN BYTE DE LA EEPROM FILE
*
*  ENTRADA: NINGUNA
*  SALIDA:  BYTE RECIBIDO EN ACCA
*
*[]--------------------------------------------------[]
GETBYTE PSHX
        PSHB
        CLRB              * SE ARMA EL BYTE EN ACCB TEMPORALMENTE
        LDX     #$0008    * PREPARA LA RECEPCION DE 8 BITS
GT_B    ASLB              * AJUSTA LOS BITS RECIBIDOS
        JSR     GETBIT
        ABA               * SUMA EL NUEVO BIT AL ACCB
        TAB
        DEX
        BNE     GT_B
        TBA               * REGRESA EL BYTE RECIBIDO EN ACCA
        PULB
        PULX
        RTS



*[]------------------------------------------------[]
*
*  PROCEDIMIENTO QUE ENVIA UN BYTE A LA EEPROM FILE
*
*  ENTRADA: BYTE PARA ENVIAR EN ACCA
*  SALIDA:  NINGUNA
*
*[]------------------------------------------------[]
PUTBYTE PSHB
        PSHX              * PREPARA EL ENVIO DE 8 BITS
        LDX     #$0008
        CLC               * ACTIVA EN 0 EL CARRY FLAG PARA LA OPERACION
        TAB               * CARGA EN ACCB EL BYTE PARA ENVIAR
        ROLB
PUT_B   ROLB              * POSICIONA EL SIGUIENTE BIT PARA ENVIAR
        TPA               * GUARDA EL CONDITION CODE REGISTER
        PSHA
        TBA               * BIT PARA ENVIAR EN D0 DEL ACCA
        JSR     PUTBIT
        PULA              * RECUPERA EL CONDITION CODE REGISTER
        TAP
        DEX
        BNE     PUT_B
        PULX
        PULB
        RTS



*[]----------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PRODUCE LA SECUENCIA "START" ANTES
*  DE CADA ACCESO A LA EEPROM FILE
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*[]----------------------------------------------------[]
STARTC  PSHA
        JSR     EEPCL     * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #BUSTOP   * ACTIVA EN ALTO LOS BITS DE DATO Y CLOCK
        STAA    DIRBUS
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #$17      * ACTIVA EN BAJO EL BIT DE DATOS INDICANDO
        STAA    DIRBUS    * LA "START CONDITION"
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #NODISP   * ACTIVA EN BAJO EL BIT CLOCK
        STAA    DIRBUS
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        PULA
        RTS



*[]-----------------------------------------------------[]
*
*  PROCEDIMIENTO QUE PRODUCE LA SECUENCIA "STOP" DESPUES
*  DE CADA ACCESO A LA EEPROM FILE
*
*  ENTRADA: NINGUNA
*  SALIDA:  NINGUNA
*
*[]-----------------------------------------------------[]
STOPC   PSHA
        LDAA    #NODISP
        STAA    DIRBUS
        LDAA    #$17      * ACTIVA EN ALTO EL BIT CLOCK
        STAA    DIRBUS
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #BUSTOP   * ACTIVA EN ALTO EL BIT DATO
        STAA    DIRBUS
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #$0F      * ACTIVA EN BAJO EL BIT CLOCK
        STAA    DIRBUS
        JSR     EEPCL     * AJUSTE PARA EL PERIODO DE CLOCK
        PULA
        RTS



*[]-----------------------------------------------------------[]
*
*  PROCEDIMIENTO UTILIZADO PARA ENVIAR UN BIT A LA EEPROM FILE
*  PARA SU ALMACENAMIENTO
*
*  ENTRADA: BIT DE DATO EN D0 DE ACCA
*  SALIDA:  NINGUNA
*
*[]-----------------------------------------------------------[]
PUTBIT  PSHB
        ASLA              * PREPARA EL BIT DE DATO
        ASLA
        ASLA
        ANDA    #$08
        LDAB    DIRBUS
        ANDB    #NODISP
        ABA
        STAA    DIRBUS    * ENVIA EL BIT DE DATO
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    DIRBUS
        ORA     #$10      * ACTIVA EN ALTO EL BIT CLOCK
        STAA    DIRBUS
        JSR     EEPCL     * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    DIRBUS    * ACTIVA EN BAJO EL BIT CLOCK
        ANDA    #$0F
        STAA    DIRBUS
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAA    #NODISP   * ACTIVA EN BAJO EL BIT DATO
        STAA    DIRBUS
        PULB
        RTS



*[]-------------------------------------------------------------[]
*
*  PROCEDIMIENTO UTILIZADO PARA RECIBIR UN BIT DE LA EEPROM FILE
*  PARA SU PROCESAMIENTO
*
*  ENTRADA: NINGUNA
*  SALIDA:  BIT DE DATO EN D0 DEL ACCA
*
*[]-------------------------------------------------------------[]
GETBIT  PSHB
        LDAA    #NODISP   * ACTIVA EN 0 EL BIT CLOCK
        STAA    DIRBUS
        LDAA    #$17      * ACTIVA EL BIT DATO COMO ENTRADA
        STAA    $01
        JSR     EEPCL2    * AJUSTE PARA EL PERIODO DE CLOCK
        LDAB    #BUSTOP   * ACTIVA EN ALTO EL BIT CLOCK
        STAB    DIRBUS
        JSR     EEPCL     * AJUSTE PARA EL PERIODO DE CLOCK
        CLRA
        LDAB    DIRBUS    * LEE EL BIT DESDE LA EEPROM FILE
        ASRB
        ASRB
        ASRB
        ANDB    #1
        ABA               * REGRESA EL BIT EN ACCA
        LDAB   #NODISP    * ACTIVA EN BAJO EL BIT CLOCK
        STAB   DIRBUS
        JSR    EEPCL2     * AJUSTE PARA EL PERIODO DE CLOCK
        LDAB   #BUSTOP    * ACTIVA EL BIT DATO COMO SALIDA
        STAB   $01
        PULB
        RTS



EEPCL   PSHA
        LDAA    #$04
        BRA     EE3
EEPCL2  PSHA
        LDAA    #$02
EE3     DECA
        BNE     EE3
        PULA
        RTS



        FCC     '  Dise¤o e Implementaci¢n: Jose R. Portillo y Alessandro Rossetto  '



        ORG     VECTOR
        FDB     #MASTER



        ORG     BOOT
        FDB     #ISRT+1
